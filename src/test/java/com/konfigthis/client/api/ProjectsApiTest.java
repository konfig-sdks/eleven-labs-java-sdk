/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddProjectResponseModel;
import com.konfigthis.client.model.BodyAddProjectV1ProjectsAddPost;
import com.konfigthis.client.model.BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost;
import com.konfigthis.client.model.ChapterResponseModel;
import com.konfigthis.client.model.ChapterSnapshotsResponseModel;
import java.io.File;
import com.konfigthis.client.model.GetChaptersResponseModel;
import com.konfigthis.client.model.GetProjectsResponseModel;
import com.konfigthis.client.model.ProjectExtendedResponseModel;
import com.konfigthis.client.model.ProjectSnapshotsResponseModel;
import com.konfigthis.client.model.PronunciationDictionaryVersionLocatorDBModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private static ProjectsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProjectsApi(apiClient);
    }

    /**
     * Add Project
     *
     * Creates a new project, it can be either initialized as blank, from a document or from a URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewProjectTest() throws ApiException {
        String name = null;
        String defaultTitleVoiceId = null;
        String defaultParagraphVoiceId = null;
        String defaultModelId = null;
        List<String> pronunciationDictionaryLocators = null;
        String xiApiKey = null;
        String title = null;
        String fromUrl = null;
        File fromDocument = null;
        String qualityPreset = null;
        String author = null;
        String isbnNumber = null;
        Boolean acxVolumeNormalization = null;
        Boolean volumeNormalization = null;
        String callbackUrl = null;
        AddProjectResponseModel response = api.createNewProject(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators)
                .xiApiKey(xiApiKey)
                .title(title)
                .fromUrl(fromUrl)
                .fromDocument(fromDocument)
                .qualityPreset(qualityPreset)
                .author(author)
                .isbnNumber(isbnNumber)
                .acxVolumeNormalization(acxVolumeNormalization)
                .volumeNormalization(volumeNormalization)
                .callbackUrl(callbackUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Project
     *
     * Delete a project by its project_id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String projectId = null;
        String xiApiKey = null;
        Object response = api.deleteById(projectId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Chapter
     *
     * Delete a chapter by its chapter_id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChapterByIdTest() throws ApiException {
        String projectId = null;
        String chapterId = null;
        String xiApiKey = null;
        Object response = api.deleteChapterById(projectId, chapterId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Projects
     *
     * Returns a list of your projects together and its metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProjectsTest() throws ApiException {
        String xiApiKey = null;
        GetProjectsResponseModel response = api.getAllProjects()
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Project By Id
     *
     * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String projectId = null;
        String xiApiKey = null;
        ProjectExtendedResponseModel response = api.getById(projectId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Chapter By Id
     *
     * Returns information about a specific chapter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChapterByIdTest() throws ApiException {
        String projectId = null;
        String chapterId = null;
        String xiApiKey = null;
        ChapterResponseModel response = api.getChapterById(projectId, chapterId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Chapter Snapshots
     *
     * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChapterSnapshotsTest() throws ApiException {
        String projectId = null;
        String chapterId = null;
        String xiApiKey = null;
        ChapterSnapshotsResponseModel response = api.getChapterSnapshots(projectId, chapterId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Chapters
     *
     * Returns a list of your chapters for a project together and its metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChaptersTest() throws ApiException {
        String projectId = null;
        String xiApiKey = null;
        GetChaptersResponseModel response = api.listChapters(projectId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Project Snapshots
     *
     * Gets the snapshots of a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSnapshotsTest() throws ApiException {
        String projectId = null;
        String xiApiKey = null;
        ProjectSnapshotsResponseModel response = api.listSnapshots(projectId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Convert Chapter
     *
     * Starts conversion of a specific chapter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startChapterConversionTest() throws ApiException {
        String projectId = null;
        String chapterId = null;
        String xiApiKey = null;
        Object response = api.startChapterConversion(projectId, chapterId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Convert Project
     *
     * Starts conversion of a project and all of its chapters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startConversionTest() throws ApiException {
        String projectId = null;
        String xiApiKey = null;
        Object response = api.startConversion(projectId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Stream Project Audio
     *
     * Stream the audio from a project snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamAudioFromSnapshotTest() throws ApiException {
        String projectId = null;
        String projectSnapshotId = null;
        String xiApiKey = null;
        api.streamAudioFromSnapshot(projectId, projectSnapshotId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Stream Chapter Audio
     *
     * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamAudioFromSnapshotPostTest() throws ApiException {
        String projectId = null;
        String chapterId = null;
        String chapterSnapshotId = null;
        String xiApiKey = null;
        api.streamAudioFromSnapshotPost(projectId, chapterId, chapterSnapshotId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Pronunciation Dictionaries
     *
     * Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePronunciationDictionariesTest() throws ApiException {
        List<PronunciationDictionaryVersionLocatorDBModel> pronunciationDictionaryLocators = null;
        String projectId = null;
        String xiApiKey = null;
        Object response = api.updatePronunciationDictionaries(pronunciationDictionaryLocators, projectId)
                .xiApiKey(xiApiKey)
                .execute();
        // TODO: test validations
    }

}
