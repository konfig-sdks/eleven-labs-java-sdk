/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddVoiceResponseModel;
import com.konfigthis.client.model.BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost;
import com.konfigthis.client.model.BodyAddVoiceV1VoicesAddPost;
import com.konfigthis.client.model.BodyEditVoiceV1VoicesVoiceIdEditPost;
import java.io.File;
import com.konfigthis.client.model.GetLibraryVoicesResponseModel;
import com.konfigthis.client.model.GetVoicesResponseModel;
import com.konfigthis.client.model.VoiceResponseModel;
import com.konfigthis.client.model.VoiceSettingsResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VoicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VoicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToCollectionCall(String publicUserId, String voiceId, BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost;

        // create path and map variables
        String localVarPath = "/v1/voices/add/{public_user_id}/{voice_id}"
            .replace("{" + "public_user_id" + "}", localVarApiClient.escapeString(publicUserId.toString()))
            .replace("{" + "voice_id" + "}", localVarApiClient.escapeString(voiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCollectionValidateBeforeCall(String publicUserId, String voiceId, BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'publicUserId' is set
        if (publicUserId == null) {
            throw new ApiException("Missing the required parameter 'publicUserId' when calling addToCollection(Async)");
        }

        // verify the required parameter 'voiceId' is set
        if (voiceId == null) {
            throw new ApiException("Missing the required parameter 'voiceId' when calling addToCollection(Async)");
        }

        // verify the required parameter 'bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost' is set
        if (bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost == null) {
            throw new ApiException("Missing the required parameter 'bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost' when calling addToCollection(Async)");
        }

        return addToCollectionCall(publicUserId, voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey, _callback);

    }


    private ApiResponse<AddVoiceResponseModel> addToCollectionWithHttpInfo(String publicUserId, String voiceId, BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = addToCollectionValidateBeforeCall(publicUserId, voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey, null);
        Type localVarReturnType = new TypeToken<AddVoiceResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToCollectionAsync(String publicUserId, String voiceId, BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, String xiApiKey, final ApiCallback<AddVoiceResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCollectionValidateBeforeCall(publicUserId, voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<AddVoiceResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToCollectionRequestBuilder {
        private final String newName;
        private final String publicUserId;
        private final String voiceId;
        private String xiApiKey;

        private AddToCollectionRequestBuilder(String newName, String publicUserId, String voiceId) {
            this.newName = newName;
            this.publicUserId = publicUserId;
            this.voiceId = voiceId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return AddToCollectionRequestBuilder
         */
        public AddToCollectionRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for addToCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost = buildBodyParams();
            return addToCollectionCall(publicUserId, voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey, _callback);
        }

        private BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost buildBodyParams() {
            BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost = new BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost();
            bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost.newName(this.newName);
            return bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost;
        }

        /**
         * Execute addToCollection request
         * @return AddVoiceResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public AddVoiceResponseModel execute() throws ApiException {
            BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost = buildBodyParams();
            ApiResponse<AddVoiceResponseModel> localVarResp = addToCollectionWithHttpInfo(publicUserId, voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToCollection request with HTTP info returned
         * @return ApiResponse&lt;AddVoiceResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddVoiceResponseModel> executeWithHttpInfo() throws ApiException {
            BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost = buildBodyParams();
            return addToCollectionWithHttpInfo(publicUserId, voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey);
        }

        /**
         * Execute addToCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddVoiceResponseModel> _callback) throws ApiException {
            BodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost = buildBodyParams();
            return addToCollectionAsync(publicUserId, voiceId, bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost, xiApiKey, _callback);
        }
    }

    /**
     * Add Sharing Voice
     * Add a sharing voice to your collection of voices in VoiceLab.
     * @param publicUserId Public user ID used to publicly identify ElevenLabs users. (required)
     * @param voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices. (required)
     * @param bodyAddSharingVoiceV1VoicesAddPublicUserIdVoiceIdPost  (required)
     * @return AddToCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public AddToCollectionRequestBuilder addToCollection(String newName, String publicUserId, String voiceId) throws IllegalArgumentException {
        if (newName == null) throw new IllegalArgumentException("\"newName\" is required but got null");
            

        if (publicUserId == null) throw new IllegalArgumentException("\"publicUserId\" is required but got null");
            

        if (voiceId == null) throw new IllegalArgumentException("\"voiceId\" is required but got null");
            

        return new AddToCollectionRequestBuilder(newName, publicUserId, voiceId);
    }
    private okhttp3.Call addVoiceToCollectionCall(String name, List<File> files, BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost, String xiApiKey, String description, String labels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyAddVoiceV1VoicesAddPost;

        // create path and map variables
        String localVarPath = "/v1/voices/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (labels != null) {
            localVarFormParams.put("labels", labels);
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVoiceToCollectionValidateBeforeCall(String name, List<File> files, BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost, String xiApiKey, String description, String labels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addVoiceToCollection(Async)");
        }

        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling addVoiceToCollection(Async)");
        }

        // verify the required parameter 'bodyAddVoiceV1VoicesAddPost' is set
        if (bodyAddVoiceV1VoicesAddPost == null) {
            throw new ApiException("Missing the required parameter 'bodyAddVoiceV1VoicesAddPost' when calling addVoiceToCollection(Async)");
        }

        return addVoiceToCollectionCall(name, files, bodyAddVoiceV1VoicesAddPost, xiApiKey, description, labels, _callback);

    }


    private ApiResponse<AddVoiceResponseModel> addVoiceToCollectionWithHttpInfo(String name, List<File> files, BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost, String xiApiKey, String description, String labels) throws ApiException {
        okhttp3.Call localVarCall = addVoiceToCollectionValidateBeforeCall(name, files, bodyAddVoiceV1VoicesAddPost, xiApiKey, description, labels, null);
        Type localVarReturnType = new TypeToken<AddVoiceResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addVoiceToCollectionAsync(String name, List<File> files, BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost, String xiApiKey, String description, String labels, final ApiCallback<AddVoiceResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVoiceToCollectionValidateBeforeCall(name, files, bodyAddVoiceV1VoicesAddPost, xiApiKey, description, labels, _callback);
        Type localVarReturnType = new TypeToken<AddVoiceResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddVoiceToCollectionRequestBuilder {
        private final String name;
        private final List<File> files;
        private String xiApiKey;
        private String description;
        private String labels;

        private AddVoiceToCollectionRequestBuilder(String name, List<File> files) {
            this.name = name;
            this.files = files;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return AddVoiceToCollectionRequestBuilder
         */
        public AddVoiceToCollectionRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Set description
         * @param description How would you describe the voice? (optional)
         * @return AddVoiceToCollectionRequestBuilder
         */
        public AddVoiceToCollectionRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set labels
         * @param labels Serialized labels dictionary for the voice. (optional)
         * @return AddVoiceToCollectionRequestBuilder
         */
        public AddVoiceToCollectionRequestBuilder labels(String labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Build call for addVoiceToCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost = buildBodyParams();
            return addVoiceToCollectionCall(name, files, bodyAddVoiceV1VoicesAddPost, xiApiKey, description, labels, _callback);
        }

        private BodyAddVoiceV1VoicesAddPost buildBodyParams() {
            BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost = new BodyAddVoiceV1VoicesAddPost();
            bodyAddVoiceV1VoicesAddPost.description(this.description);
            bodyAddVoiceV1VoicesAddPost.name(this.name);
            bodyAddVoiceV1VoicesAddPost.files(this.files);
            bodyAddVoiceV1VoicesAddPost.labels(this.labels);
            return bodyAddVoiceV1VoicesAddPost;
        }

        /**
         * Execute addVoiceToCollection request
         * @return AddVoiceResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public AddVoiceResponseModel execute() throws ApiException {
            BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost = buildBodyParams();
            ApiResponse<AddVoiceResponseModel> localVarResp = addVoiceToCollectionWithHttpInfo(name, files, bodyAddVoiceV1VoicesAddPost, xiApiKey, description, labels);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addVoiceToCollection request with HTTP info returned
         * @return ApiResponse&lt;AddVoiceResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddVoiceResponseModel> executeWithHttpInfo() throws ApiException {
            BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost = buildBodyParams();
            return addVoiceToCollectionWithHttpInfo(name, files, bodyAddVoiceV1VoicesAddPost, xiApiKey, description, labels);
        }

        /**
         * Execute addVoiceToCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddVoiceResponseModel> _callback) throws ApiException {
            BodyAddVoiceV1VoicesAddPost bodyAddVoiceV1VoicesAddPost = buildBodyParams();
            return addVoiceToCollectionAsync(name, files, bodyAddVoiceV1VoicesAddPost, xiApiKey, description, labels, _callback);
        }
    }

    /**
     * Add Voice
     * Add a new voice to your collection of voices in VoiceLab.
     * @param name The name that identifies this voice. This will be displayed in the dropdown of the website. (required)
     * @param files One or more audio files to clone the voice from (required)
     * @param bodyAddVoiceV1VoicesAddPost  (required)
     * @return AddVoiceToCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public AddVoiceToCollectionRequestBuilder addVoiceToCollection(String name, List<File> files) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (files == null) throw new IllegalArgumentException("\"files\" is required but got null");
        return new AddVoiceToCollectionRequestBuilder(name, files);
    }
    private okhttp3.Call deleteByIdCall(String voiceId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/voices/{voice_id}"
            .replace("{" + "voice_id" + "}", localVarApiClient.escapeString(voiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String voiceId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceId' is set
        if (voiceId == null) {
            throw new ApiException("Missing the required parameter 'voiceId' when calling deleteById(Async)");
        }

        return deleteByIdCall(voiceId, xiApiKey, _callback);

    }


    private ApiResponse<Object> deleteByIdWithHttpInfo(String voiceId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(voiceId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(String voiceId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(voiceId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String voiceId;
        private String xiApiKey;

        private DeleteByIdRequestBuilder(String voiceId) {
            this.voiceId = voiceId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(voiceId, xiApiKey, _callback);
        }


        /**
         * Execute deleteById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteByIdWithHttpInfo(voiceId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(voiceId, xiApiKey);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteByIdAsync(voiceId, xiApiKey, _callback);
        }
    }

    /**
     * Delete Voice
     * Deletes a voice by its ID.
     * @param voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String voiceId) throws IllegalArgumentException {
        if (voiceId == null) throw new IllegalArgumentException("\"voiceId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(voiceId);
    }
    private okhttp3.Call editSettingsPostCall(String voiceId, VoiceSettingsResponseModel voiceSettingsResponseModel, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voiceSettingsResponseModel;

        // create path and map variables
        String localVarPath = "/v1/voices/{voice_id}/settings/edit"
            .replace("{" + "voice_id" + "}", localVarApiClient.escapeString(voiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editSettingsPostValidateBeforeCall(String voiceId, VoiceSettingsResponseModel voiceSettingsResponseModel, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceId' is set
        if (voiceId == null) {
            throw new ApiException("Missing the required parameter 'voiceId' when calling editSettingsPost(Async)");
        }

        // verify the required parameter 'voiceSettingsResponseModel' is set
        if (voiceSettingsResponseModel == null) {
            throw new ApiException("Missing the required parameter 'voiceSettingsResponseModel' when calling editSettingsPost(Async)");
        }

        return editSettingsPostCall(voiceId, voiceSettingsResponseModel, xiApiKey, _callback);

    }


    private ApiResponse<Object> editSettingsPostWithHttpInfo(String voiceId, VoiceSettingsResponseModel voiceSettingsResponseModel, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = editSettingsPostValidateBeforeCall(voiceId, voiceSettingsResponseModel, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editSettingsPostAsync(String voiceId, VoiceSettingsResponseModel voiceSettingsResponseModel, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = editSettingsPostValidateBeforeCall(voiceId, voiceSettingsResponseModel, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditSettingsPostRequestBuilder {
        private final Double stability;
        private final Double similarityBoost;
        private final String voiceId;
        private Double style;
        private Boolean useSpeakerBoost;
        private String xiApiKey;

        private EditSettingsPostRequestBuilder(double stability, double similarityBoost, String voiceId) {
            this.stability = stability;
            this.similarityBoost = similarityBoost;
            this.voiceId = voiceId;
        }

        /**
         * Set style
         * @param style  (optional, default to 0)
         * @return EditSettingsPostRequestBuilder
         */
        public EditSettingsPostRequestBuilder style(Double style) {
            this.style = style;
            return this;
        }
        
        /**
         * Set useSpeakerBoost
         * @param useSpeakerBoost  (optional, default to true)
         * @return EditSettingsPostRequestBuilder
         */
        public EditSettingsPostRequestBuilder useSpeakerBoost(Boolean useSpeakerBoost) {
            this.useSpeakerBoost = useSpeakerBoost;
            return this;
        }
        
        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return EditSettingsPostRequestBuilder
         */
        public EditSettingsPostRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for editSettingsPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VoiceSettingsResponseModel voiceSettingsResponseModel = buildBodyParams();
            return editSettingsPostCall(voiceId, voiceSettingsResponseModel, xiApiKey, _callback);
        }

        private VoiceSettingsResponseModel buildBodyParams() {
            VoiceSettingsResponseModel voiceSettingsResponseModel = new VoiceSettingsResponseModel();
            voiceSettingsResponseModel.stability(this.stability);
            voiceSettingsResponseModel.similarityBoost(this.similarityBoost);
            voiceSettingsResponseModel.style(this.style);
            voiceSettingsResponseModel.useSpeakerBoost(this.useSpeakerBoost);
            return voiceSettingsResponseModel;
        }

        /**
         * Execute editSettingsPost request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            VoiceSettingsResponseModel voiceSettingsResponseModel = buildBodyParams();
            ApiResponse<Object> localVarResp = editSettingsPostWithHttpInfo(voiceId, voiceSettingsResponseModel, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editSettingsPost request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            VoiceSettingsResponseModel voiceSettingsResponseModel = buildBodyParams();
            return editSettingsPostWithHttpInfo(voiceId, voiceSettingsResponseModel, xiApiKey);
        }

        /**
         * Execute editSettingsPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            VoiceSettingsResponseModel voiceSettingsResponseModel = buildBodyParams();
            return editSettingsPostAsync(voiceId, voiceSettingsResponseModel, xiApiKey, _callback);
        }
    }

    /**
     * Edit Voice Settings
     * Edit your settings for a specific voice. \&quot;similarity_boost\&quot; corresponds to\&quot;Clarity + Similarity Enhancement\&quot; in the web app and \&quot;stability\&quot; corresponds to \&quot;Stability\&quot; slider in the web app.
     * @param voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices. (required)
     * @param voiceSettingsResponseModel  (required)
     * @return EditSettingsPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public EditSettingsPostRequestBuilder editSettingsPost(double stability, double similarityBoost, String voiceId) throws IllegalArgumentException {
        
        
        if (voiceId == null) throw new IllegalArgumentException("\"voiceId\" is required but got null");
            

        return new EditSettingsPostRequestBuilder(stability, similarityBoost, voiceId);
    }
    private okhttp3.Call getDefaultVoiceSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/voices/settings/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultVoiceSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDefaultVoiceSettingsCall(_callback);

    }


    private ApiResponse<VoiceSettingsResponseModel> getDefaultVoiceSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDefaultVoiceSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VoiceSettingsResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultVoiceSettingsAsync(final ApiCallback<VoiceSettingsResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultVoiceSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VoiceSettingsResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultVoiceSettingsRequestBuilder {

        private GetDefaultVoiceSettingsRequestBuilder() {
        }

        /**
         * Build call for getDefaultVoiceSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultVoiceSettingsCall(_callback);
        }


        /**
         * Execute getDefaultVoiceSettings request
         * @return VoiceSettingsResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public VoiceSettingsResponseModel execute() throws ApiException {
            ApiResponse<VoiceSettingsResponseModel> localVarResp = getDefaultVoiceSettingsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultVoiceSettings request with HTTP info returned
         * @return ApiResponse&lt;VoiceSettingsResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoiceSettingsResponseModel> executeWithHttpInfo() throws ApiException {
            return getDefaultVoiceSettingsWithHttpInfo();
        }

        /**
         * Execute getDefaultVoiceSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoiceSettingsResponseModel> _callback) throws ApiException {
            return getDefaultVoiceSettingsAsync(_callback);
        }
    }

    /**
     * Get Default Voice Settings.
     * Gets the default settings for voices. \&quot;similarity_boost\&quot; corresponds to\&quot;Clarity + Similarity Enhancement\&quot; in the web app and \&quot;stability\&quot; corresponds to \&quot;Stability\&quot; slider in the web app.
     * @return GetDefaultVoiceSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultVoiceSettingsRequestBuilder getDefaultVoiceSettings() throws IllegalArgumentException {
        return new GetDefaultVoiceSettingsRequestBuilder();
    }
    private okhttp3.Call getSettingsCall(String voiceId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/voices/{voice_id}/settings"
            .replace("{" + "voice_id" + "}", localVarApiClient.escapeString(voiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(String voiceId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceId' is set
        if (voiceId == null) {
            throw new ApiException("Missing the required parameter 'voiceId' when calling getSettings(Async)");
        }

        return getSettingsCall(voiceId, xiApiKey, _callback);

    }


    private ApiResponse<VoiceSettingsResponseModel> getSettingsWithHttpInfo(String voiceId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(voiceId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<VoiceSettingsResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(String voiceId, String xiApiKey, final ApiCallback<VoiceSettingsResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(voiceId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<VoiceSettingsResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final String voiceId;
        private String xiApiKey;

        private GetSettingsRequestBuilder(String voiceId) {
            this.voiceId = voiceId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetSettingsRequestBuilder
         */
        public GetSettingsRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(voiceId, xiApiKey, _callback);
        }


        /**
         * Execute getSettings request
         * @return VoiceSettingsResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public VoiceSettingsResponseModel execute() throws ApiException {
            ApiResponse<VoiceSettingsResponseModel> localVarResp = getSettingsWithHttpInfo(voiceId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;VoiceSettingsResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoiceSettingsResponseModel> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(voiceId, xiApiKey);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoiceSettingsResponseModel> _callback) throws ApiException {
            return getSettingsAsync(voiceId, xiApiKey, _callback);
        }
    }

    /**
     * Get Voice Settings
     * Returns the settings for a specific voice. \&quot;similarity_boost\&quot; corresponds to\&quot;Clarity + Similarity Enhancement\&quot; in the web app and \&quot;stability\&quot; corresponds to \&quot;Stability\&quot; slider in the web app.
     * @param voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices. (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(String voiceId) throws IllegalArgumentException {
        if (voiceId == null) throw new IllegalArgumentException("\"voiceId\" is required but got null");
            

        return new GetSettingsRequestBuilder(voiceId);
    }
    private okhttp3.Call getSharedVoicesCall(Integer pageSize, String category, String gender, String age, String accent, String search, List<String> useCases, List<String> descriptives, String sort, Boolean featured, Integer page, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shared-voices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (gender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gender", gender));
        }

        if (age != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age", age));
        }

        if (accent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accent", accent));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (useCases != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "use_cases", useCases));
        }

        if (descriptives != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "descriptives", descriptives));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedVoicesValidateBeforeCall(Integer pageSize, String category, String gender, String age, String accent, String search, List<String> useCases, List<String> descriptives, String sort, Boolean featured, Integer page, String xiApiKey, final ApiCallback _callback) throws ApiException {
        return getSharedVoicesCall(pageSize, category, gender, age, accent, search, useCases, descriptives, sort, featured, page, xiApiKey, _callback);

    }


    private ApiResponse<GetLibraryVoicesResponseModel> getSharedVoicesWithHttpInfo(Integer pageSize, String category, String gender, String age, String accent, String search, List<String> useCases, List<String> descriptives, String sort, Boolean featured, Integer page, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getSharedVoicesValidateBeforeCall(pageSize, category, gender, age, accent, search, useCases, descriptives, sort, featured, page, xiApiKey, null);
        Type localVarReturnType = new TypeToken<GetLibraryVoicesResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSharedVoicesAsync(Integer pageSize, String category, String gender, String age, String accent, String search, List<String> useCases, List<String> descriptives, String sort, Boolean featured, Integer page, String xiApiKey, final ApiCallback<GetLibraryVoicesResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedVoicesValidateBeforeCall(pageSize, category, gender, age, accent, search, useCases, descriptives, sort, featured, page, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<GetLibraryVoicesResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSharedVoicesRequestBuilder {
        private Integer pageSize;
        private String category;
        private String gender;
        private String age;
        private String accent;
        private String search;
        private List<String> useCases;
        private List<String> descriptives;
        private String sort;
        private Boolean featured;
        private Integer page;
        private String xiApiKey;

        private GetSharedVoicesRequestBuilder() {
        }

        /**
         * Set pageSize
         * @param pageSize How many shared voices to return at maximum. Can not exceed 500, defaults to 30. (optional, default to 30)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set category
         * @param category voice category used for filtering (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set gender
         * @param gender gender used for filtering (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set age
         * @param age age used for filtering (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder age(String age) {
            this.age = age;
            return this;
        }
        
        /**
         * Set accent
         * @param accent accent used for filtering (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder accent(String accent) {
            this.accent = accent;
            return this;
        }
        
        /**
         * Set search
         * @param search search term used for filtering (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set useCases
         * @param useCases use-case used for filtering (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder useCases(List<String> useCases) {
            this.useCases = useCases;
            return this;
        }
        
        /**
         * Set descriptives
         * @param descriptives search term used for filtering (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder descriptives(List<String> descriptives) {
            this.descriptives = descriptives;
            return this;
        }
        
        /**
         * Set sort
         * @param sort sort criteria (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set featured
         * @param featured Filter featured voices (optional, default to false)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder featured(Boolean featured) {
            this.featured = featured;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetSharedVoicesRequestBuilder
         */
        public GetSharedVoicesRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getSharedVoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSharedVoicesCall(pageSize, category, gender, age, accent, search, useCases, descriptives, sort, featured, page, xiApiKey, _callback);
        }


        /**
         * Execute getSharedVoices request
         * @return GetLibraryVoicesResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetLibraryVoicesResponseModel execute() throws ApiException {
            ApiResponse<GetLibraryVoicesResponseModel> localVarResp = getSharedVoicesWithHttpInfo(pageSize, category, gender, age, accent, search, useCases, descriptives, sort, featured, page, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSharedVoices request with HTTP info returned
         * @return ApiResponse&lt;GetLibraryVoicesResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetLibraryVoicesResponseModel> executeWithHttpInfo() throws ApiException {
            return getSharedVoicesWithHttpInfo(pageSize, category, gender, age, accent, search, useCases, descriptives, sort, featured, page, xiApiKey);
        }

        /**
         * Execute getSharedVoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetLibraryVoicesResponseModel> _callback) throws ApiException {
            return getSharedVoicesAsync(pageSize, category, gender, age, accent, search, useCases, descriptives, sort, featured, page, xiApiKey, _callback);
        }
    }

    /**
     * Get Voices
     * Gets a list of shared voices.
     * @return GetSharedVoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetSharedVoicesRequestBuilder getSharedVoices() throws IllegalArgumentException {
        return new GetSharedVoicesRequestBuilder();
    }
    private okhttp3.Call getVoiceMetadataCall(String voiceId, Boolean withSettings, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/voices/{voice_id}"
            .replace("{" + "voice_id" + "}", localVarApiClient.escapeString(voiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_settings", withSettings));
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceMetadataValidateBeforeCall(String voiceId, Boolean withSettings, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceId' is set
        if (voiceId == null) {
            throw new ApiException("Missing the required parameter 'voiceId' when calling getVoiceMetadata(Async)");
        }

        return getVoiceMetadataCall(voiceId, withSettings, xiApiKey, _callback);

    }


    private ApiResponse<VoiceResponseModel> getVoiceMetadataWithHttpInfo(String voiceId, Boolean withSettings, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getVoiceMetadataValidateBeforeCall(voiceId, withSettings, xiApiKey, null);
        Type localVarReturnType = new TypeToken<VoiceResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVoiceMetadataAsync(String voiceId, Boolean withSettings, String xiApiKey, final ApiCallback<VoiceResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceMetadataValidateBeforeCall(voiceId, withSettings, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<VoiceResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVoiceMetadataRequestBuilder {
        private final String voiceId;
        private Boolean withSettings;
        private String xiApiKey;

        private GetVoiceMetadataRequestBuilder(String voiceId) {
            this.voiceId = voiceId;
        }

        /**
         * Set withSettings
         * @param withSettings If set will return settings information corresponding to the voice, requires authorization. (optional, default to false)
         * @return GetVoiceMetadataRequestBuilder
         */
        public GetVoiceMetadataRequestBuilder withSettings(Boolean withSettings) {
            this.withSettings = withSettings;
            return this;
        }
        
        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetVoiceMetadataRequestBuilder
         */
        public GetVoiceMetadataRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getVoiceMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVoiceMetadataCall(voiceId, withSettings, xiApiKey, _callback);
        }


        /**
         * Execute getVoiceMetadata request
         * @return VoiceResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public VoiceResponseModel execute() throws ApiException {
            ApiResponse<VoiceResponseModel> localVarResp = getVoiceMetadataWithHttpInfo(voiceId, withSettings, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVoiceMetadata request with HTTP info returned
         * @return ApiResponse&lt;VoiceResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoiceResponseModel> executeWithHttpInfo() throws ApiException {
            return getVoiceMetadataWithHttpInfo(voiceId, withSettings, xiApiKey);
        }

        /**
         * Execute getVoiceMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoiceResponseModel> _callback) throws ApiException {
            return getVoiceMetadataAsync(voiceId, withSettings, xiApiKey, _callback);
        }
    }

    /**
     * Get Voice
     * Returns metadata about a specific voice.
     * @param voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices. (required)
     * @return GetVoiceMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetVoiceMetadataRequestBuilder getVoiceMetadata(String voiceId) throws IllegalArgumentException {
        if (voiceId == null) throw new IllegalArgumentException("\"voiceId\" is required but got null");
            

        return new GetVoiceMetadataRequestBuilder(voiceId);
    }
    private okhttp3.Call listAllVoicesCall(String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/voices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllVoicesValidateBeforeCall(String xiApiKey, final ApiCallback _callback) throws ApiException {
        return listAllVoicesCall(xiApiKey, _callback);

    }


    private ApiResponse<GetVoicesResponseModel> listAllVoicesWithHttpInfo(String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = listAllVoicesValidateBeforeCall(xiApiKey, null);
        Type localVarReturnType = new TypeToken<GetVoicesResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllVoicesAsync(String xiApiKey, final ApiCallback<GetVoicesResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllVoicesValidateBeforeCall(xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<GetVoicesResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllVoicesRequestBuilder {
        private String xiApiKey;

        private ListAllVoicesRequestBuilder() {
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return ListAllVoicesRequestBuilder
         */
        public ListAllVoicesRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for listAllVoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllVoicesCall(xiApiKey, _callback);
        }


        /**
         * Execute listAllVoices request
         * @return GetVoicesResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetVoicesResponseModel execute() throws ApiException {
            ApiResponse<GetVoicesResponseModel> localVarResp = listAllVoicesWithHttpInfo(xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllVoices request with HTTP info returned
         * @return ApiResponse&lt;GetVoicesResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetVoicesResponseModel> executeWithHttpInfo() throws ApiException {
            return listAllVoicesWithHttpInfo(xiApiKey);
        }

        /**
         * Execute listAllVoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetVoicesResponseModel> _callback) throws ApiException {
            return listAllVoicesAsync(xiApiKey, _callback);
        }
    }

    /**
     * Get Voices
     * Gets a list of all available voices for a user.
     * @return ListAllVoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListAllVoicesRequestBuilder listAllVoices() throws IllegalArgumentException {
        return new ListAllVoicesRequestBuilder();
    }
    private okhttp3.Call updateVoiceByIdCall(String voiceId, String name, BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost, String xiApiKey, String description, List<File> files, String labels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyEditVoiceV1VoicesVoiceIdEditPost;

        // create path and map variables
        String localVarPath = "/v1/voices/{voice_id}/edit"
            .replace("{" + "voice_id" + "}", localVarApiClient.escapeString(voiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (labels != null) {
            localVarFormParams.put("labels", labels);
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVoiceByIdValidateBeforeCall(String voiceId, String name, BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost, String xiApiKey, String description, List<File> files, String labels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceId' is set
        if (voiceId == null) {
            throw new ApiException("Missing the required parameter 'voiceId' when calling updateVoiceById(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateVoiceById(Async)");
        }

        // verify the required parameter 'bodyEditVoiceV1VoicesVoiceIdEditPost' is set
        if (bodyEditVoiceV1VoicesVoiceIdEditPost == null) {
            throw new ApiException("Missing the required parameter 'bodyEditVoiceV1VoicesVoiceIdEditPost' when calling updateVoiceById(Async)");
        }

        return updateVoiceByIdCall(voiceId, name, bodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey, description, files, labels, _callback);

    }


    private ApiResponse<Object> updateVoiceByIdWithHttpInfo(String voiceId, String name, BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost, String xiApiKey, String description, List<File> files, String labels) throws ApiException {
        okhttp3.Call localVarCall = updateVoiceByIdValidateBeforeCall(voiceId, name, bodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey, description, files, labels, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateVoiceByIdAsync(String voiceId, String name, BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost, String xiApiKey, String description, List<File> files, String labels, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVoiceByIdValidateBeforeCall(voiceId, name, bodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey, description, files, labels, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateVoiceByIdRequestBuilder {
        private final String voiceId;
        private final String name;
        private String xiApiKey;
        private String description;
        private List<File> files;
        private String labels;

        private UpdateVoiceByIdRequestBuilder(String voiceId, String name) {
            this.voiceId = voiceId;
            this.name = name;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return UpdateVoiceByIdRequestBuilder
         */
        public UpdateVoiceByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Set description
         * @param description How would you describe the voice? (optional)
         * @return UpdateVoiceByIdRequestBuilder
         */
        public UpdateVoiceByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set files
         * @param files Audio files to add to the voice (optional)
         * @return UpdateVoiceByIdRequestBuilder
         */
        public UpdateVoiceByIdRequestBuilder files(List<File> files) {
            this.files = files;
            return this;
        }
        
        /**
         * Set labels
         * @param labels Serialized labels dictionary for the voice. (optional)
         * @return UpdateVoiceByIdRequestBuilder
         */
        public UpdateVoiceByIdRequestBuilder labels(String labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Build call for updateVoiceById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost = buildBodyParams();
            return updateVoiceByIdCall(voiceId, name, bodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey, description, files, labels, _callback);
        }

        private BodyEditVoiceV1VoicesVoiceIdEditPost buildBodyParams() {
            BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost = new BodyEditVoiceV1VoicesVoiceIdEditPost();
            bodyEditVoiceV1VoicesVoiceIdEditPost.description(this.description);
            bodyEditVoiceV1VoicesVoiceIdEditPost.name(this.name);
            bodyEditVoiceV1VoicesVoiceIdEditPost.files(this.files);
            bodyEditVoiceV1VoicesVoiceIdEditPost.labels(this.labels);
            return bodyEditVoiceV1VoicesVoiceIdEditPost;
        }

        /**
         * Execute updateVoiceById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost = buildBodyParams();
            ApiResponse<Object> localVarResp = updateVoiceByIdWithHttpInfo(voiceId, name, bodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey, description, files, labels);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateVoiceById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost = buildBodyParams();
            return updateVoiceByIdWithHttpInfo(voiceId, name, bodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey, description, files, labels);
        }

        /**
         * Execute updateVoiceById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BodyEditVoiceV1VoicesVoiceIdEditPost bodyEditVoiceV1VoicesVoiceIdEditPost = buildBodyParams();
            return updateVoiceByIdAsync(voiceId, name, bodyEditVoiceV1VoicesVoiceIdEditPost, xiApiKey, description, files, labels, _callback);
        }
    }

    /**
     * Edit Voice
     * Edit a voice created by you.
     * @param voiceId Voice ID to be used, you can use https://api.elevenlabs.io/v1/voices to list all the available voices. (required)
     * @param name The name that identifies this voice. This will be displayed in the dropdown of the website. (required)
     * @param bodyEditVoiceV1VoicesVoiceIdEditPost  (required)
     * @return UpdateVoiceByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVoiceByIdRequestBuilder updateVoiceById(String voiceId, String name) throws IllegalArgumentException {
        if (voiceId == null) throw new IllegalArgumentException("\"voiceId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new UpdateVoiceByIdRequestBuilder(voiceId, name);
    }
}
