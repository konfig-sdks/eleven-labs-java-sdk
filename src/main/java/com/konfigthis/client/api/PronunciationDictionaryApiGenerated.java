/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddPronunciationDictionaryResponseModel;
import com.konfigthis.client.model.BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost;
import java.io.File;
import com.konfigthis.client.model.GetPronunciationDictionaryMetadataResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PronunciationDictionaryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PronunciationDictionaryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PronunciationDictionaryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFromFileCall(String name, BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, String xiApiKey, String description, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost;

        // create path and map variables
        String localVarPath = "/v1/pronunciation-dictionaries/add-from-file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFromFileValidateBeforeCall(String name, BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, String xiApiKey, String description, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createFromFile(Async)");
        }

        // verify the required parameter 'bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost' is set
        if (bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost == null) {
            throw new ApiException("Missing the required parameter 'bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost' when calling createFromFile(Async)");
        }

        return createFromFileCall(name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey, description, _file, _callback);

    }


    private ApiResponse<AddPronunciationDictionaryResponseModel> createFromFileWithHttpInfo(String name, BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, String xiApiKey, String description, File _file) throws ApiException {
        okhttp3.Call localVarCall = createFromFileValidateBeforeCall(name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey, description, _file, null);
        Type localVarReturnType = new TypeToken<AddPronunciationDictionaryResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFromFileAsync(String name, BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, String xiApiKey, String description, File _file, final ApiCallback<AddPronunciationDictionaryResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFromFileValidateBeforeCall(name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey, description, _file, _callback);
        Type localVarReturnType = new TypeToken<AddPronunciationDictionaryResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFromFileRequestBuilder {
        private final String name;
        private String xiApiKey;
        private String description;
        private File _file;

        private CreateFromFileRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return CreateFromFileRequestBuilder
         */
        public CreateFromFileRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Set description
         * @param description A description of the pronunciation dictionary, used for identification only. (optional)
         * @return CreateFromFileRequestBuilder
         */
        public CreateFromFileRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set _file
         * @param _file A lexicon .pls file which we will use to initialize the project with. (optional)
         * @return CreateFromFileRequestBuilder
         */
        public CreateFromFileRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for createFromFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost = buildBodyParams();
            return createFromFileCall(name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey, description, _file, _callback);
        }

        private BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost buildBodyParams() {
            BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost = new BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost();
            bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost.description(this.description);
            bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost._file(this._file);
            bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost.name(this.name);
            return bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost;
        }

        /**
         * Execute createFromFile request
         * @return AddPronunciationDictionaryResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public AddPronunciationDictionaryResponseModel execute() throws ApiException {
            BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost = buildBodyParams();
            ApiResponse<AddPronunciationDictionaryResponseModel> localVarResp = createFromFileWithHttpInfo(name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey, description, _file);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFromFile request with HTTP info returned
         * @return ApiResponse&lt;AddPronunciationDictionaryResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddPronunciationDictionaryResponseModel> executeWithHttpInfo() throws ApiException {
            BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost = buildBodyParams();
            return createFromFileWithHttpInfo(name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey, description, _file);
        }

        /**
         * Execute createFromFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddPronunciationDictionaryResponseModel> _callback) throws ApiException {
            BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost = buildBodyParams();
            return createFromFileAsync(name, bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, xiApiKey, description, _file, _callback);
        }
    }

    /**
     * Add A Pronunciation Dictionary
     * Creates a new pronunciation dictionary from a lexicon .PLS file
     * @param name The name of the pronunciation dictionary, used for identification only. (required)
     * @param bodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost  (required)
     * @return CreateFromFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateFromFileRequestBuilder createFromFile(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateFromFileRequestBuilder(name);
    }
    private okhttp3.Call getMetadataCall(String pronunciationDictionaryId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pronunciation-dictionaries/{pronunciation_dictionary_id}"
            .replace("{" + "pronunciation_dictionary_id" + "}", localVarApiClient.escapeString(pronunciationDictionaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataValidateBeforeCall(String pronunciationDictionaryId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pronunciationDictionaryId' is set
        if (pronunciationDictionaryId == null) {
            throw new ApiException("Missing the required parameter 'pronunciationDictionaryId' when calling getMetadata(Async)");
        }

        return getMetadataCall(pronunciationDictionaryId, xiApiKey, _callback);

    }


    private ApiResponse<GetPronunciationDictionaryMetadataResponseModel> getMetadataWithHttpInfo(String pronunciationDictionaryId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(pronunciationDictionaryId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<GetPronunciationDictionaryMetadataResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadataAsync(String pronunciationDictionaryId, String xiApiKey, final ApiCallback<GetPronunciationDictionaryMetadataResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(pronunciationDictionaryId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<GetPronunciationDictionaryMetadataResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadataRequestBuilder {
        private final String pronunciationDictionaryId;
        private String xiApiKey;

        private GetMetadataRequestBuilder(String pronunciationDictionaryId) {
            this.pronunciationDictionaryId = pronunciationDictionaryId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadataCall(pronunciationDictionaryId, xiApiKey, _callback);
        }


        /**
         * Execute getMetadata request
         * @return GetPronunciationDictionaryMetadataResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetPronunciationDictionaryMetadataResponseModel execute() throws ApiException {
            ApiResponse<GetPronunciationDictionaryMetadataResponseModel> localVarResp = getMetadataWithHttpInfo(pronunciationDictionaryId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadata request with HTTP info returned
         * @return ApiResponse&lt;GetPronunciationDictionaryMetadataResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPronunciationDictionaryMetadataResponseModel> executeWithHttpInfo() throws ApiException {
            return getMetadataWithHttpInfo(pronunciationDictionaryId, xiApiKey);
        }

        /**
         * Execute getMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPronunciationDictionaryMetadataResponseModel> _callback) throws ApiException {
            return getMetadataAsync(pronunciationDictionaryId, xiApiKey, _callback);
        }
    }

    /**
     * Get Metadata For A Pronunciation Dictionary
     * Get metadata for a pronunciation dictionary
     * @param pronunciationDictionaryId The id of the pronunciation dictionary (required)
     * @return GetMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataRequestBuilder getMetadata(String pronunciationDictionaryId) throws IllegalArgumentException {
        if (pronunciationDictionaryId == null) throw new IllegalArgumentException("\"pronunciationDictionaryId\" is required but got null");
            

        return new GetMetadataRequestBuilder(pronunciationDictionaryId);
    }
}
