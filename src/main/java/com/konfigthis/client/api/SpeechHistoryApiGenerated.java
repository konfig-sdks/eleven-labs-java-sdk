/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BodyDownloadHistoryItemsV1HistoryDownloadPost;
import com.konfigthis.client.model.GetSpeechHistoryResponseModel;
import com.konfigthis.client.model.SpeechHistoryItemResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SpeechHistoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpeechHistoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SpeechHistoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteHistoryItemByIdCall(String historyItemId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/history/{history_item_id}"
            .replace("{" + "history_item_id" + "}", localVarApiClient.escapeString(historyItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHistoryItemByIdValidateBeforeCall(String historyItemId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'historyItemId' is set
        if (historyItemId == null) {
            throw new ApiException("Missing the required parameter 'historyItemId' when calling deleteHistoryItemById(Async)");
        }

        return deleteHistoryItemByIdCall(historyItemId, xiApiKey, _callback);

    }


    private ApiResponse<Object> deleteHistoryItemByIdWithHttpInfo(String historyItemId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteHistoryItemByIdValidateBeforeCall(historyItemId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteHistoryItemByIdAsync(String historyItemId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHistoryItemByIdValidateBeforeCall(historyItemId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteHistoryItemByIdRequestBuilder {
        private final String historyItemId;
        private String xiApiKey;

        private DeleteHistoryItemByIdRequestBuilder(String historyItemId) {
            this.historyItemId = historyItemId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return DeleteHistoryItemByIdRequestBuilder
         */
        public DeleteHistoryItemByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for deleteHistoryItemById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteHistoryItemByIdCall(historyItemId, xiApiKey, _callback);
        }


        /**
         * Execute deleteHistoryItemById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteHistoryItemByIdWithHttpInfo(historyItemId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteHistoryItemById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteHistoryItemByIdWithHttpInfo(historyItemId, xiApiKey);
        }

        /**
         * Execute deleteHistoryItemById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteHistoryItemByIdAsync(historyItemId, xiApiKey, _callback);
        }
    }

    /**
     * Delete History Item
     * Delete a history item by its ID
     * @param historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs. (required)
     * @return DeleteHistoryItemByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHistoryItemByIdRequestBuilder deleteHistoryItemById(String historyItemId) throws IllegalArgumentException {
        if (historyItemId == null) throw new IllegalArgumentException("\"historyItemId\" is required but got null");
            

        return new DeleteHistoryItemByIdRequestBuilder(historyItemId);
    }
    private okhttp3.Call downloadHistoryItemsCall(BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyDownloadHistoryItemsV1HistoryDownloadPost;

        // create path and map variables
        String localVarPath = "/v1/history/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadHistoryItemsValidateBeforeCall(BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bodyDownloadHistoryItemsV1HistoryDownloadPost' is set
        if (bodyDownloadHistoryItemsV1HistoryDownloadPost == null) {
            throw new ApiException("Missing the required parameter 'bodyDownloadHistoryItemsV1HistoryDownloadPost' when calling downloadHistoryItems(Async)");
        }

        return downloadHistoryItemsCall(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey, _callback);

    }


    private ApiResponse<Void> downloadHistoryItemsWithHttpInfo(BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = downloadHistoryItemsValidateBeforeCall(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call downloadHistoryItemsAsync(BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost, String xiApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadHistoryItemsValidateBeforeCall(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DownloadHistoryItemsRequestBuilder {
        private final List<String> historyItemIds;
        private String xiApiKey;

        private DownloadHistoryItemsRequestBuilder(List<String> historyItemIds) {
            this.historyItemIds = historyItemIds;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return DownloadHistoryItemsRequestBuilder
         */
        public DownloadHistoryItemsRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for downloadHistoryItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost = buildBodyParams();
            return downloadHistoryItemsCall(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey, _callback);
        }

        private BodyDownloadHistoryItemsV1HistoryDownloadPost buildBodyParams() {
            BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost = new BodyDownloadHistoryItemsV1HistoryDownloadPost();
            bodyDownloadHistoryItemsV1HistoryDownloadPost.historyItemIds(this.historyItemIds);
            return bodyDownloadHistoryItemsV1HistoryDownloadPost;
        }

        /**
         * Execute downloadHistoryItems request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost = buildBodyParams();
            downloadHistoryItemsWithHttpInfo(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey);
        }

        /**
         * Execute downloadHistoryItems request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost = buildBodyParams();
            return downloadHistoryItemsWithHttpInfo(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey);
        }

        /**
         * Execute downloadHistoryItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BodyDownloadHistoryItemsV1HistoryDownloadPost bodyDownloadHistoryItemsV1HistoryDownloadPost = buildBodyParams();
            return downloadHistoryItemsAsync(bodyDownloadHistoryItemsV1HistoryDownloadPost, xiApiKey, _callback);
        }
    }

    /**
     * Download History Items
     * Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.
     * @param bodyDownloadHistoryItemsV1HistoryDownloadPost  (required)
     * @return DownloadHistoryItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DownloadHistoryItemsRequestBuilder downloadHistoryItems(List<String> historyItemIds) throws IllegalArgumentException {
        if (historyItemIds == null) throw new IllegalArgumentException("\"historyItemIds\" is required but got null");
        return new DownloadHistoryItemsRequestBuilder(historyItemIds);
    }
    private okhttp3.Call getGeneratedAudioMetadataCall(Integer pageSize, String startAfterHistoryItemId, String voiceId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startAfterHistoryItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_after_history_item_id", startAfterHistoryItemId));
        }

        if (voiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voice_id", voiceId));
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneratedAudioMetadataValidateBeforeCall(Integer pageSize, String startAfterHistoryItemId, String voiceId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        return getGeneratedAudioMetadataCall(pageSize, startAfterHistoryItemId, voiceId, xiApiKey, _callback);

    }


    private ApiResponse<GetSpeechHistoryResponseModel> getGeneratedAudioMetadataWithHttpInfo(Integer pageSize, String startAfterHistoryItemId, String voiceId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getGeneratedAudioMetadataValidateBeforeCall(pageSize, startAfterHistoryItemId, voiceId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<GetSpeechHistoryResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGeneratedAudioMetadataAsync(Integer pageSize, String startAfterHistoryItemId, String voiceId, String xiApiKey, final ApiCallback<GetSpeechHistoryResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneratedAudioMetadataValidateBeforeCall(pageSize, startAfterHistoryItemId, voiceId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<GetSpeechHistoryResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGeneratedAudioMetadataRequestBuilder {
        private Integer pageSize;
        private String startAfterHistoryItemId;
        private String voiceId;
        private String xiApiKey;

        private GetGeneratedAudioMetadataRequestBuilder() {
        }

        /**
         * Set pageSize
         * @param pageSize How many history items to return at maximum. Can not exceed 1000, defaults to 100. (optional, default to 100)
         * @return GetGeneratedAudioMetadataRequestBuilder
         */
        public GetGeneratedAudioMetadataRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set startAfterHistoryItemId
         * @param startAfterHistoryItemId After which ID to start fetching, use this parameter to paginate across a large collection of history items. In case this parameter is not provided history items will be fetched starting from the most recently created one ordered descending by their creation date. (optional)
         * @return GetGeneratedAudioMetadataRequestBuilder
         */
        public GetGeneratedAudioMetadataRequestBuilder startAfterHistoryItemId(String startAfterHistoryItemId) {
            this.startAfterHistoryItemId = startAfterHistoryItemId;
            return this;
        }
        
        /**
         * Set voiceId
         * @param voiceId Voice ID to be filtered for, you can use GET https://api.elevenlabs.io/v1/voices to receive a list of voices and their IDs. (optional)
         * @return GetGeneratedAudioMetadataRequestBuilder
         */
        public GetGeneratedAudioMetadataRequestBuilder voiceId(String voiceId) {
            this.voiceId = voiceId;
            return this;
        }
        
        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetGeneratedAudioMetadataRequestBuilder
         */
        public GetGeneratedAudioMetadataRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getGeneratedAudioMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGeneratedAudioMetadataCall(pageSize, startAfterHistoryItemId, voiceId, xiApiKey, _callback);
        }


        /**
         * Execute getGeneratedAudioMetadata request
         * @return GetSpeechHistoryResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetSpeechHistoryResponseModel execute() throws ApiException {
            ApiResponse<GetSpeechHistoryResponseModel> localVarResp = getGeneratedAudioMetadataWithHttpInfo(pageSize, startAfterHistoryItemId, voiceId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGeneratedAudioMetadata request with HTTP info returned
         * @return ApiResponse&lt;GetSpeechHistoryResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSpeechHistoryResponseModel> executeWithHttpInfo() throws ApiException {
            return getGeneratedAudioMetadataWithHttpInfo(pageSize, startAfterHistoryItemId, voiceId, xiApiKey);
        }

        /**
         * Execute getGeneratedAudioMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSpeechHistoryResponseModel> _callback) throws ApiException {
            return getGeneratedAudioMetadataAsync(pageSize, startAfterHistoryItemId, voiceId, xiApiKey, _callback);
        }
    }

    /**
     * Get Generated Items
     * Returns metadata about all your generated audio.
     * @return GetGeneratedAudioMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetGeneratedAudioMetadataRequestBuilder getGeneratedAudioMetadata() throws IllegalArgumentException {
        return new GetGeneratedAudioMetadataRequestBuilder();
    }
    private okhttp3.Call getHistoryItemAudioCall(String historyItemId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/history/{history_item_id}/audio"
            .replace("{" + "history_item_id" + "}", localVarApiClient.escapeString(historyItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "audio/mpeg",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryItemAudioValidateBeforeCall(String historyItemId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'historyItemId' is set
        if (historyItemId == null) {
            throw new ApiException("Missing the required parameter 'historyItemId' when calling getHistoryItemAudio(Async)");
        }

        return getHistoryItemAudioCall(historyItemId, xiApiKey, _callback);

    }


    private ApiResponse<Void> getHistoryItemAudioWithHttpInfo(String historyItemId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getHistoryItemAudioValidateBeforeCall(historyItemId, xiApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getHistoryItemAudioAsync(String historyItemId, String xiApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryItemAudioValidateBeforeCall(historyItemId, xiApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetHistoryItemAudioRequestBuilder {
        private final String historyItemId;
        private String xiApiKey;

        private GetHistoryItemAudioRequestBuilder(String historyItemId) {
            this.historyItemId = historyItemId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetHistoryItemAudioRequestBuilder
         */
        public GetHistoryItemAudioRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getHistoryItemAudio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryItemAudioCall(historyItemId, xiApiKey, _callback);
        }


        /**
         * Execute getHistoryItemAudio request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getHistoryItemAudioWithHttpInfo(historyItemId, xiApiKey);
        }

        /**
         * Execute getHistoryItemAudio request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getHistoryItemAudioWithHttpInfo(historyItemId, xiApiKey);
        }

        /**
         * Execute getHistoryItemAudio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getHistoryItemAudioAsync(historyItemId, xiApiKey, _callback);
        }
    }

    /**
     * Get Audio From History Item
     * Returns the audio of an history item.
     * @param historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs. (required)
     * @return GetHistoryItemAudioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryItemAudioRequestBuilder getHistoryItemAudio(String historyItemId) throws IllegalArgumentException {
        if (historyItemId == null) throw new IllegalArgumentException("\"historyItemId\" is required but got null");
            

        return new GetHistoryItemAudioRequestBuilder(historyItemId);
    }
    private okhttp3.Call getHistoryItemByIdCall(String historyItemId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/history/{history_item_id}"
            .replace("{" + "history_item_id" + "}", localVarApiClient.escapeString(historyItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryItemByIdValidateBeforeCall(String historyItemId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'historyItemId' is set
        if (historyItemId == null) {
            throw new ApiException("Missing the required parameter 'historyItemId' when calling getHistoryItemById(Async)");
        }

        return getHistoryItemByIdCall(historyItemId, xiApiKey, _callback);

    }


    private ApiResponse<SpeechHistoryItemResponseModel> getHistoryItemByIdWithHttpInfo(String historyItemId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getHistoryItemByIdValidateBeforeCall(historyItemId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<SpeechHistoryItemResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryItemByIdAsync(String historyItemId, String xiApiKey, final ApiCallback<SpeechHistoryItemResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryItemByIdValidateBeforeCall(historyItemId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<SpeechHistoryItemResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHistoryItemByIdRequestBuilder {
        private final String historyItemId;
        private String xiApiKey;

        private GetHistoryItemByIdRequestBuilder(String historyItemId) {
            this.historyItemId = historyItemId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetHistoryItemByIdRequestBuilder
         */
        public GetHistoryItemByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getHistoryItemById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryItemByIdCall(historyItemId, xiApiKey, _callback);
        }


        /**
         * Execute getHistoryItemById request
         * @return SpeechHistoryItemResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public SpeechHistoryItemResponseModel execute() throws ApiException {
            ApiResponse<SpeechHistoryItemResponseModel> localVarResp = getHistoryItemByIdWithHttpInfo(historyItemId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHistoryItemById request with HTTP info returned
         * @return ApiResponse&lt;SpeechHistoryItemResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SpeechHistoryItemResponseModel> executeWithHttpInfo() throws ApiException {
            return getHistoryItemByIdWithHttpInfo(historyItemId, xiApiKey);
        }

        /**
         * Execute getHistoryItemById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SpeechHistoryItemResponseModel> _callback) throws ApiException {
            return getHistoryItemByIdAsync(historyItemId, xiApiKey, _callback);
        }
    }

    /**
     * Get History Item By Id
     * Returns information about an history item by its ID.
     * @param historyItemId History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs. (required)
     * @return GetHistoryItemByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryItemByIdRequestBuilder getHistoryItemById(String historyItemId) throws IllegalArgumentException {
        if (historyItemId == null) throw new IllegalArgumentException("\"historyItemId\" is required but got null");
            

        return new GetHistoryItemByIdRequestBuilder(historyItemId);
    }
}
