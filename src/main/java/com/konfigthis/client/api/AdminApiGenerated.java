/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call archiveCouponPromocodePostCall(String promocode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/n8enylacgd/coupon/{promocode}/archive"
            .replace("{" + "promocode" + "}", localVarApiClient.escapeString(promocode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveCouponPromocodePostValidateBeforeCall(String promocode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promocode' is set
        if (promocode == null) {
            throw new ApiException("Missing the required parameter 'promocode' when calling archiveCouponPromocodePost(Async)");
        }

        return archiveCouponPromocodePostCall(promocode, _callback);

    }


    private ApiResponse<Object> archiveCouponPromocodePostWithHttpInfo(String promocode) throws ApiException {
        okhttp3.Call localVarCall = archiveCouponPromocodePostValidateBeforeCall(promocode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call archiveCouponPromocodePostAsync(String promocode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveCouponPromocodePostValidateBeforeCall(promocode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ArchiveCouponPromocodePostRequestBuilder {
        private final String promocode;

        private ArchiveCouponPromocodePostRequestBuilder(String promocode) {
            this.promocode = promocode;
        }

        /**
         * Build call for archiveCouponPromocodePost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveCouponPromocodePostCall(promocode, _callback);
        }


        /**
         * Execute archiveCouponPromocodePost request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = archiveCouponPromocodePostWithHttpInfo(promocode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute archiveCouponPromocodePost request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return archiveCouponPromocodePostWithHttpInfo(promocode);
        }

        /**
         * Execute archiveCouponPromocodePost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return archiveCouponPromocodePostAsync(promocode, _callback);
        }
    }

    /**
     * Archive Coupon
     * 
     * @param promocode  (required)
     * @return ArchiveCouponPromocodePostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ArchiveCouponPromocodePostRequestBuilder archiveCouponPromocodePost(String promocode) throws IllegalArgumentException {
        if (promocode == null) throw new IllegalArgumentException("\"promocode\" is required but got null");
            

        return new ArchiveCouponPromocodePostRequestBuilder(promocode);
    }
    private okhttp3.Call editVanityLinkCall(String vanityLinkId, BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost;

        // create path and map variables
        String localVarPath = "/admin/n8enylacgd/vanity-link/{vanity_link_id}/update"
            .replace("{" + "vanity_link_id" + "}", localVarApiClient.escapeString(vanityLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVanityLinkValidateBeforeCall(String vanityLinkId, BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vanityLinkId' is set
        if (vanityLinkId == null) {
            throw new ApiException("Missing the required parameter 'vanityLinkId' when calling editVanityLink(Async)");
        }

        // verify the required parameter 'bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost' is set
        if (bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost == null) {
            throw new ApiException("Missing the required parameter 'bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost' when calling editVanityLink(Async)");
        }

        return editVanityLinkCall(vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, _callback);

    }


    private ApiResponse<Object> editVanityLinkWithHttpInfo(String vanityLinkId, BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost) throws ApiException {
        okhttp3.Call localVarCall = editVanityLinkValidateBeforeCall(vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editVanityLinkAsync(String vanityLinkId, BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVanityLinkValidateBeforeCall(vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditVanityLinkRequestBuilder {
        private final String vanitySlug;
        private final String targetUrl;
        private final String comment;
        private final String vanityLinkId;

        private EditVanityLinkRequestBuilder(String vanitySlug, String targetUrl, String comment, String vanityLinkId) {
            this.vanitySlug = vanitySlug;
            this.targetUrl = targetUrl;
            this.comment = comment;
            this.vanityLinkId = vanityLinkId;
        }

        /**
         * Build call for editVanityLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost = buildBodyParams();
            return editVanityLinkCall(vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, _callback);
        }

        private BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost buildBodyParams() {
            BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost = new BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost();
            bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost.vanitySlug(this.vanitySlug);
            bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost.targetUrl(this.targetUrl);
            bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost.comment(this.comment);
            return bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost;
        }

        /**
         * Execute editVanityLink request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost = buildBodyParams();
            ApiResponse<Object> localVarResp = editVanityLinkWithHttpInfo(vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editVanityLink request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost = buildBodyParams();
            return editVanityLinkWithHttpInfo(vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost);
        }

        /**
         * Execute editVanityLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost = buildBodyParams();
            return editVanityLinkAsync(vanityLinkId, bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost, _callback);
        }
    }

    /**
     * Edit Vanity Link
     * 
     * @param vanityLinkId  (required)
     * @param bodyEditVanityLinkAdminN8enylacgdVanityLinkVanityLinkIdUpdatePost  (required)
     * @return EditVanityLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public EditVanityLinkRequestBuilder editVanityLink(String vanitySlug, String targetUrl, String comment, String vanityLinkId) throws IllegalArgumentException {
        if (vanitySlug == null) throw new IllegalArgumentException("\"vanitySlug\" is required but got null");
            

        if (targetUrl == null) throw new IllegalArgumentException("\"targetUrl\" is required but got null");
            

        if (comment == null) throw new IllegalArgumentException("\"comment\" is required but got null");
            

        if (vanityLinkId == null) throw new IllegalArgumentException("\"vanityLinkId\" is required but got null");
            

        return new EditVanityLinkRequestBuilder(vanitySlug, targetUrl, comment, vanityLinkId);
    }
    private okhttp3.Call getAllCouponsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/n8enylacgd/coupons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCouponsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllCouponsCall(_callback);

    }


    private ApiResponse<Object> getAllCouponsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllCouponsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllCouponsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCouponsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllCouponsRequestBuilder {

        private GetAllCouponsRequestBuilder() {
        }

        /**
         * Build call for getAllCoupons
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCouponsCall(_callback);
        }


        /**
         * Execute getAllCoupons request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAllCouponsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllCoupons request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAllCouponsWithHttpInfo();
        }

        /**
         * Execute getAllCoupons request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAllCouponsAsync(_callback);
        }
    }

    /**
     * Get All Coupons
     * 
     * @return GetAllCouponsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllCouponsRequestBuilder getAllCoupons() throws IllegalArgumentException {
        return new GetAllCouponsRequestBuilder();
    }
    private okhttp3.Call getAllVanityLinksCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/n8enylacgd/vanity-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVanityLinksValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllVanityLinksCall(_callback);

    }


    private ApiResponse<Object> getAllVanityLinksWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllVanityLinksValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllVanityLinksAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVanityLinksValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllVanityLinksRequestBuilder {

        private GetAllVanityLinksRequestBuilder() {
        }

        /**
         * Build call for getAllVanityLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllVanityLinksCall(_callback);
        }


        /**
         * Execute getAllVanityLinks request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAllVanityLinksWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllVanityLinks request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAllVanityLinksWithHttpInfo();
        }

        /**
         * Execute getAllVanityLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAllVanityLinksAsync(_callback);
        }
    }

    /**
     * Get All Vanity Links
     * 
     * @return GetAllVanityLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVanityLinksRequestBuilder getAllVanityLinks() throws IllegalArgumentException {
        return new GetAllVanityLinksRequestBuilder();
    }
    private okhttp3.Call getVanityLinkCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/n8enylacgd/vanity-link/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVanityLinkValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getVanityLink(Async)");
        }

        return getVanityLinkCall(slug, _callback);

    }


    private ApiResponse<Object> getVanityLinkWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = getVanityLinkValidateBeforeCall(slug, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVanityLinkAsync(String slug, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVanityLinkValidateBeforeCall(slug, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVanityLinkRequestBuilder {
        private final String slug;

        private GetVanityLinkRequestBuilder(String slug) {
            this.slug = slug;
        }

        /**
         * Build call for getVanityLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVanityLinkCall(slug, _callback);
        }


        /**
         * Execute getVanityLink request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getVanityLinkWithHttpInfo(slug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVanityLink request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getVanityLinkWithHttpInfo(slug);
        }

        /**
         * Execute getVanityLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getVanityLinkAsync(slug, _callback);
        }
    }

    /**
     * Get Vanity Link
     * 
     * @param slug  (required)
     * @return GetVanityLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetVanityLinkRequestBuilder getVanityLink(String slug) throws IllegalArgumentException {
        if (slug == null) throw new IllegalArgumentException("\"slug\" is required but got null");
            

        return new GetVanityLinkRequestBuilder(slug);
    }
    private okhttp3.Call removeVanityLinkCall(String vanityLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/n8enylacgd/vanity-link/{vanity_link_id}/delete"
            .replace("{" + "vanity_link_id" + "}", localVarApiClient.escapeString(vanityLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVanityLinkValidateBeforeCall(String vanityLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vanityLinkId' is set
        if (vanityLinkId == null) {
            throw new ApiException("Missing the required parameter 'vanityLinkId' when calling removeVanityLink(Async)");
        }

        return removeVanityLinkCall(vanityLinkId, _callback);

    }


    private ApiResponse<Object> removeVanityLinkWithHttpInfo(String vanityLinkId) throws ApiException {
        okhttp3.Call localVarCall = removeVanityLinkValidateBeforeCall(vanityLinkId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeVanityLinkAsync(String vanityLinkId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVanityLinkValidateBeforeCall(vanityLinkId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveVanityLinkRequestBuilder {
        private final String vanityLinkId;

        private RemoveVanityLinkRequestBuilder(String vanityLinkId) {
            this.vanityLinkId = vanityLinkId;
        }

        /**
         * Build call for removeVanityLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeVanityLinkCall(vanityLinkId, _callback);
        }


        /**
         * Execute removeVanityLink request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeVanityLinkWithHttpInfo(vanityLinkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeVanityLink request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeVanityLinkWithHttpInfo(vanityLinkId);
        }

        /**
         * Execute removeVanityLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeVanityLinkAsync(vanityLinkId, _callback);
        }
    }

    /**
     * Delete Vanity Link
     * 
     * @param vanityLinkId  (required)
     * @return RemoveVanityLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveVanityLinkRequestBuilder removeVanityLink(String vanityLinkId) throws IllegalArgumentException {
        if (vanityLinkId == null) throw new IllegalArgumentException("\"vanityLinkId\" is required but got null");
            

        return new RemoveVanityLinkRequestBuilder(vanityLinkId);
    }
}
