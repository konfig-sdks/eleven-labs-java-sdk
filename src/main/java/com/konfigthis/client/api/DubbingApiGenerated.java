/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BodyDubAVideoOrAnAudioFileV1DubbingPost;
import com.konfigthis.client.model.DoDubbingResponseModel;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DubbingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DubbingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DubbingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteProjectCall(String dubbingId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dubbing/{dubbing_id}"
            .replace("{" + "dubbing_id" + "}", localVarApiClient.escapeString(dubbingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(String dubbingId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dubbingId' is set
        if (dubbingId == null) {
            throw new ApiException("Missing the required parameter 'dubbingId' when calling deleteProject(Async)");
        }

        return deleteProjectCall(dubbingId, xiApiKey, _callback);

    }


    private ApiResponse<Object> deleteProjectWithHttpInfo(String dubbingId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(dubbingId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteProjectAsync(String dubbingId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(dubbingId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteProjectRequestBuilder {
        private final String dubbingId;
        private String xiApiKey;

        private DeleteProjectRequestBuilder(String dubbingId) {
            this.dubbingId = dubbingId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return DeleteProjectRequestBuilder
         */
        public DeleteProjectRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for deleteProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProjectCall(dubbingId, xiApiKey, _callback);
        }


        /**
         * Execute deleteProject request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteProjectWithHttpInfo(dubbingId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteProject request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteProjectWithHttpInfo(dubbingId, xiApiKey);
        }

        /**
         * Execute deleteProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteProjectAsync(dubbingId, xiApiKey, _callback);
        }
    }

    /**
     * Delete Dubbing Project
     * Deletes a dubbing project.
     * @param dubbingId ID of the dubbing project. (required)
     * @return DeleteProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectRequestBuilder deleteProject(String dubbingId) throws IllegalArgumentException {
        if (dubbingId == null) throw new IllegalArgumentException("\"dubbingId\" is required but got null");
            

        return new DeleteProjectRequestBuilder(dubbingId);
    }
    private okhttp3.Call fileInLanguageCall(String targetLang, BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost, String xiApiKey, String mode, File _file, File csvFile, File foregroundAudioFile, File backgroundAudioFile, String name, String sourceUrl, String sourceLang, Integer numSpeakers, Boolean watermark, Integer startTime, Integer endTime, Boolean highestResolution, Boolean dubbingStudio, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyDubAVideoOrAnAudioFileV1DubbingPost;

        // create path and map variables
        String localVarPath = "/v1/dubbing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarFormParams.put("mode", mode);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (csvFile != null) {
            localVarFormParams.put("csv_file", csvFile);
        }

        if (foregroundAudioFile != null) {
            localVarFormParams.put("foreground_audio_file", foregroundAudioFile);
        }

        if (backgroundAudioFile != null) {
            localVarFormParams.put("background_audio_file", backgroundAudioFile);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (sourceUrl != null) {
            localVarFormParams.put("source_url", sourceUrl);
        }

        if (sourceLang != null) {
            localVarFormParams.put("source_lang", sourceLang);
        }

        if (targetLang != null) {
            localVarFormParams.put("target_lang", targetLang);
        }

        if (numSpeakers != null) {
            localVarFormParams.put("num_speakers", numSpeakers);
        }

        if (watermark != null) {
            localVarFormParams.put("watermark", watermark);
        }

        if (startTime != null) {
            localVarFormParams.put("start_time", startTime);
        }

        if (endTime != null) {
            localVarFormParams.put("end_time", endTime);
        }

        if (highestResolution != null) {
            localVarFormParams.put("highest_resolution", highestResolution);
        }

        if (dubbingStudio != null) {
            localVarFormParams.put("dubbing_studio", dubbingStudio);
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileInLanguageValidateBeforeCall(String targetLang, BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost, String xiApiKey, String mode, File _file, File csvFile, File foregroundAudioFile, File backgroundAudioFile, String name, String sourceUrl, String sourceLang, Integer numSpeakers, Boolean watermark, Integer startTime, Integer endTime, Boolean highestResolution, Boolean dubbingStudio, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetLang' is set
        if (targetLang == null) {
            throw new ApiException("Missing the required parameter 'targetLang' when calling fileInLanguage(Async)");
        }

        // verify the required parameter 'bodyDubAVideoOrAnAudioFileV1DubbingPost' is set
        if (bodyDubAVideoOrAnAudioFileV1DubbingPost == null) {
            throw new ApiException("Missing the required parameter 'bodyDubAVideoOrAnAudioFileV1DubbingPost' when calling fileInLanguage(Async)");
        }

        return fileInLanguageCall(targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey, mode, _file, csvFile, foregroundAudioFile, backgroundAudioFile, name, sourceUrl, sourceLang, numSpeakers, watermark, startTime, endTime, highestResolution, dubbingStudio, _callback);

    }


    private ApiResponse<DoDubbingResponseModel> fileInLanguageWithHttpInfo(String targetLang, BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost, String xiApiKey, String mode, File _file, File csvFile, File foregroundAudioFile, File backgroundAudioFile, String name, String sourceUrl, String sourceLang, Integer numSpeakers, Boolean watermark, Integer startTime, Integer endTime, Boolean highestResolution, Boolean dubbingStudio) throws ApiException {
        okhttp3.Call localVarCall = fileInLanguageValidateBeforeCall(targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey, mode, _file, csvFile, foregroundAudioFile, backgroundAudioFile, name, sourceUrl, sourceLang, numSpeakers, watermark, startTime, endTime, highestResolution, dubbingStudio, null);
        Type localVarReturnType = new TypeToken<DoDubbingResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fileInLanguageAsync(String targetLang, BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost, String xiApiKey, String mode, File _file, File csvFile, File foregroundAudioFile, File backgroundAudioFile, String name, String sourceUrl, String sourceLang, Integer numSpeakers, Boolean watermark, Integer startTime, Integer endTime, Boolean highestResolution, Boolean dubbingStudio, final ApiCallback<DoDubbingResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileInLanguageValidateBeforeCall(targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey, mode, _file, csvFile, foregroundAudioFile, backgroundAudioFile, name, sourceUrl, sourceLang, numSpeakers, watermark, startTime, endTime, highestResolution, dubbingStudio, _callback);
        Type localVarReturnType = new TypeToken<DoDubbingResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FileInLanguageRequestBuilder {
        private final String targetLang;
        private String xiApiKey;
        private String mode;
        private File _file;
        private File csvFile;
        private File foregroundAudioFile;
        private File backgroundAudioFile;
        private String name;
        private String sourceUrl;
        private String sourceLang;
        private Integer numSpeakers;
        private Boolean watermark;
        private Integer startTime;
        private Integer endTime;
        private Boolean highestResolution;
        private Boolean dubbingStudio;

        private FileInLanguageRequestBuilder(String targetLang) {
            this.targetLang = targetLang;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Set mode
         * @param mode automatic or manual. (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder mode(String mode) {
            this.mode = mode;
            return this;
        }
        
        /**
         * Set _file
         * @param _file One or more audio files to clone the voice from (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set csvFile
         * @param csvFile CSV file containing transcription/translation metadata (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder csvFile(File csvFile) {
            this.csvFile = csvFile;
            return this;
        }
        
        /**
         * Set foregroundAudioFile
         * @param foregroundAudioFile For use only with csv input (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder foregroundAudioFile(File foregroundAudioFile) {
            this.foregroundAudioFile = foregroundAudioFile;
            return this;
        }
        
        /**
         * Set backgroundAudioFile
         * @param backgroundAudioFile For use only with csv input (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder backgroundAudioFile(File backgroundAudioFile) {
            this.backgroundAudioFile = backgroundAudioFile;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the dubbing project. (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set sourceUrl
         * @param sourceUrl URL of the source video/audio file. (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder sourceUrl(String sourceUrl) {
            this.sourceUrl = sourceUrl;
            return this;
        }
        
        /**
         * Set sourceLang
         * @param sourceLang Source language. (optional, default to auto)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder sourceLang(String sourceLang) {
            this.sourceLang = sourceLang;
            return this;
        }
        
        /**
         * Set numSpeakers
         * @param numSpeakers Number of speakers to use for the dubbing. (optional, default to 0)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder numSpeakers(Integer numSpeakers) {
            this.numSpeakers = numSpeakers;
            return this;
        }
        
        /**
         * Set watermark
         * @param watermark Whether to apply watermark to the output video. (optional, default to false)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder watermark(Boolean watermark) {
            this.watermark = watermark;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime Start time of the source video/audio file. (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder startTime(Integer startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime End time of the source video/audio file. (optional)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder endTime(Integer endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set highestResolution
         * @param highestResolution Whether to use the highest resolution available. (optional, default to false)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder highestResolution(Boolean highestResolution) {
            this.highestResolution = highestResolution;
            return this;
        }
        
        /**
         * Set dubbingStudio
         * @param dubbingStudio Whether to prepare dub for edits in dubbing studio. (optional, default to false)
         * @return FileInLanguageRequestBuilder
         */
        public FileInLanguageRequestBuilder dubbingStudio(Boolean dubbingStudio) {
            this.dubbingStudio = dubbingStudio;
            return this;
        }
        
        /**
         * Build call for fileInLanguage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost = buildBodyParams();
            return fileInLanguageCall(targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey, mode, _file, csvFile, foregroundAudioFile, backgroundAudioFile, name, sourceUrl, sourceLang, numSpeakers, watermark, startTime, endTime, highestResolution, dubbingStudio, _callback);
        }

        private BodyDubAVideoOrAnAudioFileV1DubbingPost buildBodyParams() {
            BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost = new BodyDubAVideoOrAnAudioFileV1DubbingPost();
            bodyDubAVideoOrAnAudioFileV1DubbingPost.mode(this.mode);
            bodyDubAVideoOrAnAudioFileV1DubbingPost._file(this._file);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.csvFile(this.csvFile);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.foregroundAudioFile(this.foregroundAudioFile);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.backgroundAudioFile(this.backgroundAudioFile);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.name(this.name);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.sourceUrl(this.sourceUrl);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.sourceLang(this.sourceLang);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.targetLang(this.targetLang);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.numSpeakers(this.numSpeakers);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.watermark(this.watermark);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.startTime(this.startTime);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.endTime(this.endTime);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.highestResolution(this.highestResolution);
            bodyDubAVideoOrAnAudioFileV1DubbingPost.dubbingStudio(this.dubbingStudio);
            return bodyDubAVideoOrAnAudioFileV1DubbingPost;
        }

        /**
         * Execute fileInLanguage request
         * @return DoDubbingResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public DoDubbingResponseModel execute() throws ApiException {
            BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost = buildBodyParams();
            ApiResponse<DoDubbingResponseModel> localVarResp = fileInLanguageWithHttpInfo(targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey, mode, _file, csvFile, foregroundAudioFile, backgroundAudioFile, name, sourceUrl, sourceLang, numSpeakers, watermark, startTime, endTime, highestResolution, dubbingStudio);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute fileInLanguage request with HTTP info returned
         * @return ApiResponse&lt;DoDubbingResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DoDubbingResponseModel> executeWithHttpInfo() throws ApiException {
            BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost = buildBodyParams();
            return fileInLanguageWithHttpInfo(targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey, mode, _file, csvFile, foregroundAudioFile, backgroundAudioFile, name, sourceUrl, sourceLang, numSpeakers, watermark, startTime, endTime, highestResolution, dubbingStudio);
        }

        /**
         * Execute fileInLanguage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DoDubbingResponseModel> _callback) throws ApiException {
            BodyDubAVideoOrAnAudioFileV1DubbingPost bodyDubAVideoOrAnAudioFileV1DubbingPost = buildBodyParams();
            return fileInLanguageAsync(targetLang, bodyDubAVideoOrAnAudioFileV1DubbingPost, xiApiKey, mode, _file, csvFile, foregroundAudioFile, backgroundAudioFile, name, sourceUrl, sourceLang, numSpeakers, watermark, startTime, endTime, highestResolution, dubbingStudio, _callback);
        }
    }

    /**
     * Dub A Video Or An Audio File
     * Dubs provided audio or video file into given language.
     * @param targetLang Target language. (required)
     * @param bodyDubAVideoOrAnAudioFileV1DubbingPost  (required)
     * @return FileInLanguageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public FileInLanguageRequestBuilder fileInLanguage(String targetLang) throws IllegalArgumentException {
        if (targetLang == null) throw new IllegalArgumentException("\"targetLang\" is required but got null");
            

        return new FileInLanguageRequestBuilder(targetLang);
    }
    private okhttp3.Call getFileCall(String dubbingId, String languageCode, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dubbing/{dubbing_id}/audio/{language_code}"
            .replace("{" + "dubbing_id" + "}", localVarApiClient.escapeString(dubbingId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String dubbingId, String languageCode, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dubbingId' is set
        if (dubbingId == null) {
            throw new ApiException("Missing the required parameter 'dubbingId' when calling getFile(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling getFile(Async)");
        }

        return getFileCall(dubbingId, languageCode, xiApiKey, _callback);

    }


    private ApiResponse<Object> getFileWithHttpInfo(String dubbingId, String languageCode, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(dubbingId, languageCode, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileAsync(String dubbingId, String languageCode, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(dubbingId, languageCode, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileRequestBuilder {
        private final String dubbingId;
        private final String languageCode;
        private String xiApiKey;

        private GetFileRequestBuilder(String dubbingId, String languageCode) {
            this.dubbingId = dubbingId;
            this.languageCode = languageCode;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetFileRequestBuilder
         */
        public GetFileRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileCall(dubbingId, languageCode, xiApiKey, _callback);
        }


        /**
         * Execute getFile request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getFileWithHttpInfo(dubbingId, languageCode, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFile request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getFileWithHttpInfo(dubbingId, languageCode, xiApiKey);
        }

        /**
         * Execute getFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getFileAsync(dubbingId, languageCode, xiApiKey, _callback);
        }
    }

    /**
     * Get Dubbed File
     * Returns dubbed file.
     * @param dubbingId ID of the dubbing project. (required)
     * @param languageCode ID of the language. (required)
     * @return GetFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetFileRequestBuilder getFile(String dubbingId, String languageCode) throws IllegalArgumentException {
        if (dubbingId == null) throw new IllegalArgumentException("\"dubbingId\" is required but got null");
            

        if (languageCode == null) throw new IllegalArgumentException("\"languageCode\" is required but got null");
            

        return new GetFileRequestBuilder(dubbingId, languageCode);
    }
    private okhttp3.Call getProjectMetadataCall(String dubbingId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dubbing/{dubbing_id}"
            .replace("{" + "dubbing_id" + "}", localVarApiClient.escapeString(dubbingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMetadataValidateBeforeCall(String dubbingId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dubbingId' is set
        if (dubbingId == null) {
            throw new ApiException("Missing the required parameter 'dubbingId' when calling getProjectMetadata(Async)");
        }

        return getProjectMetadataCall(dubbingId, xiApiKey, _callback);

    }


    private ApiResponse<Object> getProjectMetadataWithHttpInfo(String dubbingId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getProjectMetadataValidateBeforeCall(dubbingId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectMetadataAsync(String dubbingId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMetadataValidateBeforeCall(dubbingId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectMetadataRequestBuilder {
        private final String dubbingId;
        private String xiApiKey;

        private GetProjectMetadataRequestBuilder(String dubbingId) {
            this.dubbingId = dubbingId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetProjectMetadataRequestBuilder
         */
        public GetProjectMetadataRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getProjectMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectMetadataCall(dubbingId, xiApiKey, _callback);
        }


        /**
         * Execute getProjectMetadata request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getProjectMetadataWithHttpInfo(dubbingId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectMetadata request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getProjectMetadataWithHttpInfo(dubbingId, xiApiKey);
        }

        /**
         * Execute getProjectMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getProjectMetadataAsync(dubbingId, xiApiKey, _callback);
        }
    }

    /**
     * Get Dubbing Project Metadata
     * Returns metadata about a dubbing project, including whether it&#39;s still in progress or not
     * @param dubbingId ID of the dubbing project. (required)
     * @return GetProjectMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectMetadataRequestBuilder getProjectMetadata(String dubbingId) throws IllegalArgumentException {
        if (dubbingId == null) throw new IllegalArgumentException("\"dubbingId\" is required but got null");
            

        return new GetProjectMetadataRequestBuilder(dubbingId);
    }
}
