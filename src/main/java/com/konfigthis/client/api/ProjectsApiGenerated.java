/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddProjectResponseModel;
import com.konfigthis.client.model.BodyAddProjectV1ProjectsAddPost;
import com.konfigthis.client.model.BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost;
import com.konfigthis.client.model.ChapterResponseModel;
import com.konfigthis.client.model.ChapterSnapshotsResponseModel;
import java.io.File;
import com.konfigthis.client.model.GetChaptersResponseModel;
import com.konfigthis.client.model.GetProjectsResponseModel;
import com.konfigthis.client.model.ProjectExtendedResponseModel;
import com.konfigthis.client.model.ProjectSnapshotsResponseModel;
import com.konfigthis.client.model.PronunciationDictionaryVersionLocatorDBModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewProjectCall(String name, String defaultTitleVoiceId, String defaultParagraphVoiceId, String defaultModelId, List<String> pronunciationDictionaryLocators, BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost, String xiApiKey, String title, String fromUrl, File fromDocument, String qualityPreset, String author, String isbnNumber, Boolean acxVolumeNormalization, Boolean volumeNormalization, String callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyAddProjectV1ProjectsAddPost;

        // create path and map variables
        String localVarPath = "/v1/projects/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (fromUrl != null) {
            localVarFormParams.put("from_url", fromUrl);
        }

        if (fromDocument != null) {
            localVarFormParams.put("from_document", fromDocument);
        }

        if (defaultTitleVoiceId != null) {
            localVarFormParams.put("default_title_voice_id", defaultTitleVoiceId);
        }

        if (defaultParagraphVoiceId != null) {
            localVarFormParams.put("default_paragraph_voice_id", defaultParagraphVoiceId);
        }

        if (defaultModelId != null) {
            localVarFormParams.put("default_model_id", defaultModelId);
        }

        if (qualityPreset != null) {
            localVarFormParams.put("quality_preset", qualityPreset);
        }

        if (author != null) {
            localVarFormParams.put("author", author);
        }

        if (isbnNumber != null) {
            localVarFormParams.put("isbn_number", isbnNumber);
        }

        if (acxVolumeNormalization != null) {
            localVarFormParams.put("acx_volume_normalization", acxVolumeNormalization);
        }

        if (volumeNormalization != null) {
            localVarFormParams.put("volume_normalization", volumeNormalization);
        }

        if (pronunciationDictionaryLocators != null) {
            localVarFormParams.put("pronunciation_dictionary_locators", pronunciationDictionaryLocators);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("callback_url", callbackUrl);
        }

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewProjectValidateBeforeCall(String name, String defaultTitleVoiceId, String defaultParagraphVoiceId, String defaultModelId, List<String> pronunciationDictionaryLocators, BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost, String xiApiKey, String title, String fromUrl, File fromDocument, String qualityPreset, String author, String isbnNumber, Boolean acxVolumeNormalization, Boolean volumeNormalization, String callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createNewProject(Async)");
        }

        // verify the required parameter 'defaultTitleVoiceId' is set
        if (defaultTitleVoiceId == null) {
            throw new ApiException("Missing the required parameter 'defaultTitleVoiceId' when calling createNewProject(Async)");
        }

        // verify the required parameter 'defaultParagraphVoiceId' is set
        if (defaultParagraphVoiceId == null) {
            throw new ApiException("Missing the required parameter 'defaultParagraphVoiceId' when calling createNewProject(Async)");
        }

        // verify the required parameter 'defaultModelId' is set
        if (defaultModelId == null) {
            throw new ApiException("Missing the required parameter 'defaultModelId' when calling createNewProject(Async)");
        }

        // verify the required parameter 'pronunciationDictionaryLocators' is set
        if (pronunciationDictionaryLocators == null) {
            throw new ApiException("Missing the required parameter 'pronunciationDictionaryLocators' when calling createNewProject(Async)");
        }

        // verify the required parameter 'bodyAddProjectV1ProjectsAddPost' is set
        if (bodyAddProjectV1ProjectsAddPost == null) {
            throw new ApiException("Missing the required parameter 'bodyAddProjectV1ProjectsAddPost' when calling createNewProject(Async)");
        }

        return createNewProjectCall(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, xiApiKey, title, fromUrl, fromDocument, qualityPreset, author, isbnNumber, acxVolumeNormalization, volumeNormalization, callbackUrl, _callback);

    }


    private ApiResponse<AddProjectResponseModel> createNewProjectWithHttpInfo(String name, String defaultTitleVoiceId, String defaultParagraphVoiceId, String defaultModelId, List<String> pronunciationDictionaryLocators, BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost, String xiApiKey, String title, String fromUrl, File fromDocument, String qualityPreset, String author, String isbnNumber, Boolean acxVolumeNormalization, Boolean volumeNormalization, String callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = createNewProjectValidateBeforeCall(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, xiApiKey, title, fromUrl, fromDocument, qualityPreset, author, isbnNumber, acxVolumeNormalization, volumeNormalization, callbackUrl, null);
        Type localVarReturnType = new TypeToken<AddProjectResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewProjectAsync(String name, String defaultTitleVoiceId, String defaultParagraphVoiceId, String defaultModelId, List<String> pronunciationDictionaryLocators, BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost, String xiApiKey, String title, String fromUrl, File fromDocument, String qualityPreset, String author, String isbnNumber, Boolean acxVolumeNormalization, Boolean volumeNormalization, String callbackUrl, final ApiCallback<AddProjectResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewProjectValidateBeforeCall(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, xiApiKey, title, fromUrl, fromDocument, qualityPreset, author, isbnNumber, acxVolumeNormalization, volumeNormalization, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<AddProjectResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewProjectRequestBuilder {
        private final String name;
        private final String defaultTitleVoiceId;
        private final String defaultParagraphVoiceId;
        private final String defaultModelId;
        private final List<String> pronunciationDictionaryLocators;
        private String xiApiKey;
        private String title;
        private String fromUrl;
        private File fromDocument;
        private String qualityPreset;
        private String author;
        private String isbnNumber;
        private Boolean acxVolumeNormalization;
        private Boolean volumeNormalization;
        private String callbackUrl;

        private CreateNewProjectRequestBuilder(String name, String defaultTitleVoiceId, String defaultParagraphVoiceId, String defaultModelId, List<String> pronunciationDictionaryLocators) {
            this.name = name;
            this.defaultTitleVoiceId = defaultTitleVoiceId;
            this.defaultParagraphVoiceId = defaultParagraphVoiceId;
            this.defaultModelId = defaultModelId;
            this.pronunciationDictionaryLocators = pronunciationDictionaryLocators;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Set title
         * @param title An optional name of the author of the project, this will be added as metadata to the mp3 file on project / chapter download. (optional)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set fromUrl
         * @param fromUrl An optional URL from which we will extract content to initialize the project. If this is set, &#39;from_url&#39; must be null. If neither &#39;from_url&#39; or &#39;from_document&#39; are provided we will initialize the project as blank. (optional)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder fromUrl(String fromUrl) {
            this.fromUrl = fromUrl;
            return this;
        }
        
        /**
         * Set fromDocument
         * @param fromDocument An optional .epub, .pdf, .txt or similar file can be provided. If provided, we will initialize the project with its content. If this is set, &#39;from_url&#39; must be null.  If neither &#39;from_url&#39; or &#39;from_document&#39; are provided we will initialize the project as blank. (optional)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder fromDocument(File fromDocument) {
            this.fromDocument = fromDocument;
            return this;
        }
        
        /**
         * Set qualityPreset
         * @param qualityPreset Output quality of the generated audio. Must be one of: standard - standard output format, 128kbps with 44.1kHz sample rate. high - high quality output format, 192kbps with 44.1kHz sample rate and major improvements on our side. Using this setting increases the character cost by 20%. ultra - ultra quality output format, 192kbps with 44.1kHz sample rate and highest improvements on our side. Using this setting increases the character cost by 50%.  (optional, default to standard)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder qualityPreset(String qualityPreset) {
            this.qualityPreset = qualityPreset;
            return this;
        }
        
        /**
         * Set author
         * @param author An optional name of the author of the project, this will be added as metadata to the mp3 file on project / chapter download. (optional)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder author(String author) {
            this.author = author;
            return this;
        }
        
        /**
         * Set isbnNumber
         * @param isbnNumber An optional ISBN number of the project you want to create, this will be added as metadata to the mp3 file on project / chapter download. (optional)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder isbnNumber(String isbnNumber) {
            this.isbnNumber = isbnNumber;
            return this;
        }
        
        /**
         * Set acxVolumeNormalization
         * @param acxVolumeNormalization [Deprecated] When the project is downloaded, should the returned audio have postprocessing in order to make it compliant with audiobook normalized volume requirements (optional, default to false)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder acxVolumeNormalization(Boolean acxVolumeNormalization) {
            this.acxVolumeNormalization = acxVolumeNormalization;
            return this;
        }
        
        /**
         * Set volumeNormalization
         * @param volumeNormalization When the project is downloaded, should the returned audio have postprocessing in order to make it compliant with audiobook normalized volume requirements (optional, default to false)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder volumeNormalization(Boolean volumeNormalization) {
            this.volumeNormalization = volumeNormalization;
            return this;
        }
        
        /**
         * Set callbackUrl
         * @param callbackUrl A url that will be called by our service when the project is converted with a json containing the status of the conversion (optional)
         * @return CreateNewProjectRequestBuilder
         */
        public CreateNewProjectRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Build call for createNewProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost = buildBodyParams();
            return createNewProjectCall(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, xiApiKey, title, fromUrl, fromDocument, qualityPreset, author, isbnNumber, acxVolumeNormalization, volumeNormalization, callbackUrl, _callback);
        }

        private BodyAddProjectV1ProjectsAddPost buildBodyParams() {
            BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost = new BodyAddProjectV1ProjectsAddPost();
            bodyAddProjectV1ProjectsAddPost.title(this.title);
            bodyAddProjectV1ProjectsAddPost.name(this.name);
            bodyAddProjectV1ProjectsAddPost.fromUrl(this.fromUrl);
            bodyAddProjectV1ProjectsAddPost.fromDocument(this.fromDocument);
            bodyAddProjectV1ProjectsAddPost.defaultTitleVoiceId(this.defaultTitleVoiceId);
            bodyAddProjectV1ProjectsAddPost.defaultParagraphVoiceId(this.defaultParagraphVoiceId);
            bodyAddProjectV1ProjectsAddPost.defaultModelId(this.defaultModelId);
            bodyAddProjectV1ProjectsAddPost.qualityPreset(this.qualityPreset);
            bodyAddProjectV1ProjectsAddPost.author(this.author);
            bodyAddProjectV1ProjectsAddPost.isbnNumber(this.isbnNumber);
            bodyAddProjectV1ProjectsAddPost.acxVolumeNormalization(this.acxVolumeNormalization);
            bodyAddProjectV1ProjectsAddPost.volumeNormalization(this.volumeNormalization);
            bodyAddProjectV1ProjectsAddPost.pronunciationDictionaryLocators(this.pronunciationDictionaryLocators);
            bodyAddProjectV1ProjectsAddPost.callbackUrl(this.callbackUrl);
            return bodyAddProjectV1ProjectsAddPost;
        }

        /**
         * Execute createNewProject request
         * @return AddProjectResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public AddProjectResponseModel execute() throws ApiException {
            BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost = buildBodyParams();
            ApiResponse<AddProjectResponseModel> localVarResp = createNewProjectWithHttpInfo(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, xiApiKey, title, fromUrl, fromDocument, qualityPreset, author, isbnNumber, acxVolumeNormalization, volumeNormalization, callbackUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewProject request with HTTP info returned
         * @return ApiResponse&lt;AddProjectResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddProjectResponseModel> executeWithHttpInfo() throws ApiException {
            BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost = buildBodyParams();
            return createNewProjectWithHttpInfo(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, xiApiKey, title, fromUrl, fromDocument, qualityPreset, author, isbnNumber, acxVolumeNormalization, volumeNormalization, callbackUrl);
        }

        /**
         * Execute createNewProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddProjectResponseModel> _callback) throws ApiException {
            BodyAddProjectV1ProjectsAddPost bodyAddProjectV1ProjectsAddPost = buildBodyParams();
            return createNewProjectAsync(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators, bodyAddProjectV1ProjectsAddPost, xiApiKey, title, fromUrl, fromDocument, qualityPreset, author, isbnNumber, acxVolumeNormalization, volumeNormalization, callbackUrl, _callback);
        }
    }

    /**
     * Add Project
     * Creates a new project, it can be either initialized as blank, from a document or from a URL.
     * @param name The name of the project, used for identification only. (required)
     * @param defaultTitleVoiceId The voice_id that corresponds to the default voice used for new titles. (required)
     * @param defaultParagraphVoiceId The voice_id that corresponds to the default voice used for new paragraphs. (required)
     * @param defaultModelId The model_id of the model to be used for this project, you can query GET https://api.elevenlabs.io/v1/models to list all available models. (required)
     * @param pronunciationDictionaryLocators A list of pronunciation dictionary locators (id, version_id) encoded as a list of JSON strings for pronunciation dictionaries to be applied to the text.  A list of json encoded strings is required as adding projects may occur through formData as opposed to jsonBody (required)
     * @param bodyAddProjectV1ProjectsAddPost  (required)
     * @return CreateNewProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewProjectRequestBuilder createNewProject(String name, String defaultTitleVoiceId, String defaultParagraphVoiceId, String defaultModelId, List<String> pronunciationDictionaryLocators) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (defaultTitleVoiceId == null) throw new IllegalArgumentException("\"defaultTitleVoiceId\" is required but got null");
            

        if (defaultParagraphVoiceId == null) throw new IllegalArgumentException("\"defaultParagraphVoiceId\" is required but got null");
            

        if (defaultModelId == null) throw new IllegalArgumentException("\"defaultModelId\" is required but got null");
            

        if (pronunciationDictionaryLocators == null) throw new IllegalArgumentException("\"pronunciationDictionaryLocators\" is required but got null");
        return new CreateNewProjectRequestBuilder(name, defaultTitleVoiceId, defaultParagraphVoiceId, defaultModelId, pronunciationDictionaryLocators);
    }
    private okhttp3.Call deleteByIdCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteById(Async)");
        }

        return deleteByIdCall(projectId, xiApiKey, _callback);

    }


    private ApiResponse<Object> deleteByIdWithHttpInfo(String projectId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(projectId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(String projectId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(projectId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String projectId;
        private String xiApiKey;

        private DeleteByIdRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(projectId, xiApiKey, _callback);
        }


        /**
         * Execute deleteById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteByIdWithHttpInfo(projectId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(projectId, xiApiKey);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteByIdAsync(projectId, xiApiKey, _callback);
        }
    }

    /**
     * Delete Project
     * Delete a project by its project_id.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(projectId);
    }
    private okhttp3.Call deleteChapterByIdCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/chapters/{chapter_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChapterByIdValidateBeforeCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteChapterById(Async)");
        }

        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling deleteChapterById(Async)");
        }

        return deleteChapterByIdCall(projectId, chapterId, xiApiKey, _callback);

    }


    private ApiResponse<Object> deleteChapterByIdWithHttpInfo(String projectId, String chapterId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteChapterByIdValidateBeforeCall(projectId, chapterId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteChapterByIdAsync(String projectId, String chapterId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChapterByIdValidateBeforeCall(projectId, chapterId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteChapterByIdRequestBuilder {
        private final String projectId;
        private final String chapterId;
        private String xiApiKey;

        private DeleteChapterByIdRequestBuilder(String projectId, String chapterId) {
            this.projectId = projectId;
            this.chapterId = chapterId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return DeleteChapterByIdRequestBuilder
         */
        public DeleteChapterByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for deleteChapterById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChapterByIdCall(projectId, chapterId, xiApiKey, _callback);
        }


        /**
         * Execute deleteChapterById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteChapterByIdWithHttpInfo(projectId, chapterId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteChapterById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteChapterByIdWithHttpInfo(projectId, chapterId, xiApiKey);
        }

        /**
         * Execute deleteChapterById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteChapterByIdAsync(projectId, chapterId, xiApiKey, _callback);
        }
    }

    /**
     * Delete Chapter
     * Delete a chapter by its chapter_id.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @param chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project. (required)
     * @return DeleteChapterByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChapterByIdRequestBuilder deleteChapterById(String projectId, String chapterId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (chapterId == null) throw new IllegalArgumentException("\"chapterId\" is required but got null");
            

        return new DeleteChapterByIdRequestBuilder(projectId, chapterId);
    }
    private okhttp3.Call getAllProjectsCall(String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProjectsValidateBeforeCall(String xiApiKey, final ApiCallback _callback) throws ApiException {
        return getAllProjectsCall(xiApiKey, _callback);

    }


    private ApiResponse<GetProjectsResponseModel> getAllProjectsWithHttpInfo(String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getAllProjectsValidateBeforeCall(xiApiKey, null);
        Type localVarReturnType = new TypeToken<GetProjectsResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllProjectsAsync(String xiApiKey, final ApiCallback<GetProjectsResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProjectsValidateBeforeCall(xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<GetProjectsResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllProjectsRequestBuilder {
        private String xiApiKey;

        private GetAllProjectsRequestBuilder() {
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetAllProjectsRequestBuilder
         */
        public GetAllProjectsRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getAllProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllProjectsCall(xiApiKey, _callback);
        }


        /**
         * Execute getAllProjects request
         * @return GetProjectsResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetProjectsResponseModel execute() throws ApiException {
            ApiResponse<GetProjectsResponseModel> localVarResp = getAllProjectsWithHttpInfo(xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllProjects request with HTTP info returned
         * @return ApiResponse&lt;GetProjectsResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProjectsResponseModel> executeWithHttpInfo() throws ApiException {
            return getAllProjectsWithHttpInfo(xiApiKey);
        }

        /**
         * Execute getAllProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProjectsResponseModel> _callback) throws ApiException {
            return getAllProjectsAsync(xiApiKey, _callback);
        }
    }

    /**
     * Get Projects
     * Returns a list of your projects together and its metadata.
     * @return GetAllProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllProjectsRequestBuilder getAllProjects() throws IllegalArgumentException {
        return new GetAllProjectsRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getById(Async)");
        }

        return getByIdCall(projectId, xiApiKey, _callback);

    }


    private ApiResponse<ProjectExtendedResponseModel> getByIdWithHttpInfo(String projectId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(projectId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<ProjectExtendedResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String projectId, String xiApiKey, final ApiCallback<ProjectExtendedResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(projectId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<ProjectExtendedResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String projectId;
        private String xiApiKey;

        private GetByIdRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(projectId, xiApiKey, _callback);
        }


        /**
         * Execute getById request
         * @return ProjectExtendedResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProjectExtendedResponseModel execute() throws ApiException {
            ApiResponse<ProjectExtendedResponseModel> localVarResp = getByIdWithHttpInfo(projectId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ProjectExtendedResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectExtendedResponseModel> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(projectId, xiApiKey);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectExtendedResponseModel> _callback) throws ApiException {
            return getByIdAsync(projectId, xiApiKey, _callback);
        }
    }

    /**
     * Get Project By Id
     * Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new GetByIdRequestBuilder(projectId);
    }
    private okhttp3.Call getChapterByIdCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/chapters/{chapter_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChapterByIdValidateBeforeCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getChapterById(Async)");
        }

        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling getChapterById(Async)");
        }

        return getChapterByIdCall(projectId, chapterId, xiApiKey, _callback);

    }


    private ApiResponse<ChapterResponseModel> getChapterByIdWithHttpInfo(String projectId, String chapterId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getChapterByIdValidateBeforeCall(projectId, chapterId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<ChapterResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChapterByIdAsync(String projectId, String chapterId, String xiApiKey, final ApiCallback<ChapterResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChapterByIdValidateBeforeCall(projectId, chapterId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<ChapterResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChapterByIdRequestBuilder {
        private final String projectId;
        private final String chapterId;
        private String xiApiKey;

        private GetChapterByIdRequestBuilder(String projectId, String chapterId) {
            this.projectId = projectId;
            this.chapterId = chapterId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetChapterByIdRequestBuilder
         */
        public GetChapterByIdRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getChapterById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChapterByIdCall(projectId, chapterId, xiApiKey, _callback);
        }


        /**
         * Execute getChapterById request
         * @return ChapterResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ChapterResponseModel execute() throws ApiException {
            ApiResponse<ChapterResponseModel> localVarResp = getChapterByIdWithHttpInfo(projectId, chapterId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChapterById request with HTTP info returned
         * @return ApiResponse&lt;ChapterResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChapterResponseModel> executeWithHttpInfo() throws ApiException {
            return getChapterByIdWithHttpInfo(projectId, chapterId, xiApiKey);
        }

        /**
         * Execute getChapterById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChapterResponseModel> _callback) throws ApiException {
            return getChapterByIdAsync(projectId, chapterId, xiApiKey, _callback);
        }
    }

    /**
     * Get Chapter By Id
     * Returns information about a specific chapter.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @param chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project. (required)
     * @return GetChapterByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetChapterByIdRequestBuilder getChapterById(String projectId, String chapterId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (chapterId == null) throw new IllegalArgumentException("\"chapterId\" is required but got null");
            

        return new GetChapterByIdRequestBuilder(projectId, chapterId);
    }
    private okhttp3.Call getChapterSnapshotsCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/chapters/{chapter_id}/snapshots"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChapterSnapshotsValidateBeforeCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getChapterSnapshots(Async)");
        }

        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling getChapterSnapshots(Async)");
        }

        return getChapterSnapshotsCall(projectId, chapterId, xiApiKey, _callback);

    }


    private ApiResponse<ChapterSnapshotsResponseModel> getChapterSnapshotsWithHttpInfo(String projectId, String chapterId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = getChapterSnapshotsValidateBeforeCall(projectId, chapterId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<ChapterSnapshotsResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChapterSnapshotsAsync(String projectId, String chapterId, String xiApiKey, final ApiCallback<ChapterSnapshotsResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChapterSnapshotsValidateBeforeCall(projectId, chapterId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<ChapterSnapshotsResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChapterSnapshotsRequestBuilder {
        private final String projectId;
        private final String chapterId;
        private String xiApiKey;

        private GetChapterSnapshotsRequestBuilder(String projectId, String chapterId) {
            this.projectId = projectId;
            this.chapterId = chapterId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return GetChapterSnapshotsRequestBuilder
         */
        public GetChapterSnapshotsRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for getChapterSnapshots
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChapterSnapshotsCall(projectId, chapterId, xiApiKey, _callback);
        }


        /**
         * Execute getChapterSnapshots request
         * @return ChapterSnapshotsResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ChapterSnapshotsResponseModel execute() throws ApiException {
            ApiResponse<ChapterSnapshotsResponseModel> localVarResp = getChapterSnapshotsWithHttpInfo(projectId, chapterId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChapterSnapshots request with HTTP info returned
         * @return ApiResponse&lt;ChapterSnapshotsResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChapterSnapshotsResponseModel> executeWithHttpInfo() throws ApiException {
            return getChapterSnapshotsWithHttpInfo(projectId, chapterId, xiApiKey);
        }

        /**
         * Execute getChapterSnapshots request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChapterSnapshotsResponseModel> _callback) throws ApiException {
            return getChapterSnapshotsAsync(projectId, chapterId, xiApiKey, _callback);
        }
    }

    /**
     * Get Chapter Snapshots
     * Gets information about all the snapshots of a chapter, each snapshot corresponds can be downloaded as audio. Whenever a chapter is converted a snapshot will be automatically created.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @param chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project. (required)
     * @return GetChapterSnapshotsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetChapterSnapshotsRequestBuilder getChapterSnapshots(String projectId, String chapterId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (chapterId == null) throw new IllegalArgumentException("\"chapterId\" is required but got null");
            

        return new GetChapterSnapshotsRequestBuilder(projectId, chapterId);
    }
    private okhttp3.Call listChaptersCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/chapters"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChaptersValidateBeforeCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listChapters(Async)");
        }

        return listChaptersCall(projectId, xiApiKey, _callback);

    }


    private ApiResponse<GetChaptersResponseModel> listChaptersWithHttpInfo(String projectId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = listChaptersValidateBeforeCall(projectId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<GetChaptersResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listChaptersAsync(String projectId, String xiApiKey, final ApiCallback<GetChaptersResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChaptersValidateBeforeCall(projectId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<GetChaptersResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListChaptersRequestBuilder {
        private final String projectId;
        private String xiApiKey;

        private ListChaptersRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return ListChaptersRequestBuilder
         */
        public ListChaptersRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for listChapters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listChaptersCall(projectId, xiApiKey, _callback);
        }


        /**
         * Execute listChapters request
         * @return GetChaptersResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public GetChaptersResponseModel execute() throws ApiException {
            ApiResponse<GetChaptersResponseModel> localVarResp = listChaptersWithHttpInfo(projectId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listChapters request with HTTP info returned
         * @return ApiResponse&lt;GetChaptersResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetChaptersResponseModel> executeWithHttpInfo() throws ApiException {
            return listChaptersWithHttpInfo(projectId, xiApiKey);
        }

        /**
         * Execute listChapters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetChaptersResponseModel> _callback) throws ApiException {
            return listChaptersAsync(projectId, xiApiKey, _callback);
        }
    }

    /**
     * Get Chapters
     * Returns a list of your chapters for a project together and its metadata.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @return ListChaptersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListChaptersRequestBuilder listChapters(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new ListChaptersRequestBuilder(projectId);
    }
    private okhttp3.Call listSnapshotsCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/snapshots"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSnapshotsValidateBeforeCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listSnapshots(Async)");
        }

        return listSnapshotsCall(projectId, xiApiKey, _callback);

    }


    private ApiResponse<ProjectSnapshotsResponseModel> listSnapshotsWithHttpInfo(String projectId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = listSnapshotsValidateBeforeCall(projectId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<ProjectSnapshotsResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSnapshotsAsync(String projectId, String xiApiKey, final ApiCallback<ProjectSnapshotsResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSnapshotsValidateBeforeCall(projectId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<ProjectSnapshotsResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSnapshotsRequestBuilder {
        private final String projectId;
        private String xiApiKey;

        private ListSnapshotsRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return ListSnapshotsRequestBuilder
         */
        public ListSnapshotsRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for listSnapshots
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSnapshotsCall(projectId, xiApiKey, _callback);
        }


        /**
         * Execute listSnapshots request
         * @return ProjectSnapshotsResponseModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ProjectSnapshotsResponseModel execute() throws ApiException {
            ApiResponse<ProjectSnapshotsResponseModel> localVarResp = listSnapshotsWithHttpInfo(projectId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSnapshots request with HTTP info returned
         * @return ApiResponse&lt;ProjectSnapshotsResponseModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectSnapshotsResponseModel> executeWithHttpInfo() throws ApiException {
            return listSnapshotsWithHttpInfo(projectId, xiApiKey);
        }

        /**
         * Execute listSnapshots request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectSnapshotsResponseModel> _callback) throws ApiException {
            return listSnapshotsAsync(projectId, xiApiKey, _callback);
        }
    }

    /**
     * Get Project Snapshots
     * Gets the snapshots of a project.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @return ListSnapshotsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListSnapshotsRequestBuilder listSnapshots(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new ListSnapshotsRequestBuilder(projectId);
    }
    private okhttp3.Call startChapterConversionCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/chapters/{chapter_id}/convert"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startChapterConversionValidateBeforeCall(String projectId, String chapterId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling startChapterConversion(Async)");
        }

        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling startChapterConversion(Async)");
        }

        return startChapterConversionCall(projectId, chapterId, xiApiKey, _callback);

    }


    private ApiResponse<Object> startChapterConversionWithHttpInfo(String projectId, String chapterId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = startChapterConversionValidateBeforeCall(projectId, chapterId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startChapterConversionAsync(String projectId, String chapterId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = startChapterConversionValidateBeforeCall(projectId, chapterId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartChapterConversionRequestBuilder {
        private final String projectId;
        private final String chapterId;
        private String xiApiKey;

        private StartChapterConversionRequestBuilder(String projectId, String chapterId) {
            this.projectId = projectId;
            this.chapterId = chapterId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return StartChapterConversionRequestBuilder
         */
        public StartChapterConversionRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for startChapterConversion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startChapterConversionCall(projectId, chapterId, xiApiKey, _callback);
        }


        /**
         * Execute startChapterConversion request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = startChapterConversionWithHttpInfo(projectId, chapterId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startChapterConversion request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return startChapterConversionWithHttpInfo(projectId, chapterId, xiApiKey);
        }

        /**
         * Execute startChapterConversion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return startChapterConversionAsync(projectId, chapterId, xiApiKey, _callback);
        }
    }

    /**
     * Convert Chapter
     * Starts conversion of a specific chapter.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @param chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project. (required)
     * @return StartChapterConversionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public StartChapterConversionRequestBuilder startChapterConversion(String projectId, String chapterId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (chapterId == null) throw new IllegalArgumentException("\"chapterId\" is required but got null");
            

        return new StartChapterConversionRequestBuilder(projectId, chapterId);
    }
    private okhttp3.Call startConversionCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/convert"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startConversionValidateBeforeCall(String projectId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling startConversion(Async)");
        }

        return startConversionCall(projectId, xiApiKey, _callback);

    }


    private ApiResponse<Object> startConversionWithHttpInfo(String projectId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = startConversionValidateBeforeCall(projectId, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startConversionAsync(String projectId, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = startConversionValidateBeforeCall(projectId, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartConversionRequestBuilder {
        private final String projectId;
        private String xiApiKey;

        private StartConversionRequestBuilder(String projectId) {
            this.projectId = projectId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return StartConversionRequestBuilder
         */
        public StartConversionRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for startConversion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startConversionCall(projectId, xiApiKey, _callback);
        }


        /**
         * Execute startConversion request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = startConversionWithHttpInfo(projectId, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startConversion request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return startConversionWithHttpInfo(projectId, xiApiKey);
        }

        /**
         * Execute startConversion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return startConversionAsync(projectId, xiApiKey, _callback);
        }
    }

    /**
     * Convert Project
     * Starts conversion of a project and all of its chapters.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @return StartConversionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public StartConversionRequestBuilder startConversion(String projectId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new StartConversionRequestBuilder(projectId);
    }
    private okhttp3.Call streamAudioFromSnapshotCall(String projectId, String projectSnapshotId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/snapshots/{project_snapshot_id}/stream"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "project_snapshot_id" + "}", localVarApiClient.escapeString(projectSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamAudioFromSnapshotValidateBeforeCall(String projectId, String projectSnapshotId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling streamAudioFromSnapshot(Async)");
        }

        // verify the required parameter 'projectSnapshotId' is set
        if (projectSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'projectSnapshotId' when calling streamAudioFromSnapshot(Async)");
        }

        return streamAudioFromSnapshotCall(projectId, projectSnapshotId, xiApiKey, _callback);

    }


    private ApiResponse<Void> streamAudioFromSnapshotWithHttpInfo(String projectId, String projectSnapshotId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = streamAudioFromSnapshotValidateBeforeCall(projectId, projectSnapshotId, xiApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call streamAudioFromSnapshotAsync(String projectId, String projectSnapshotId, String xiApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamAudioFromSnapshotValidateBeforeCall(projectId, projectSnapshotId, xiApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StreamAudioFromSnapshotRequestBuilder {
        private final String projectId;
        private final String projectSnapshotId;
        private String xiApiKey;

        private StreamAudioFromSnapshotRequestBuilder(String projectId, String projectSnapshotId) {
            this.projectId = projectId;
            this.projectSnapshotId = projectSnapshotId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return StreamAudioFromSnapshotRequestBuilder
         */
        public StreamAudioFromSnapshotRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for streamAudioFromSnapshot
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamAudioFromSnapshotCall(projectId, projectSnapshotId, xiApiKey, _callback);
        }


        /**
         * Execute streamAudioFromSnapshot request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            streamAudioFromSnapshotWithHttpInfo(projectId, projectSnapshotId, xiApiKey);
        }

        /**
         * Execute streamAudioFromSnapshot request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return streamAudioFromSnapshotWithHttpInfo(projectId, projectSnapshotId, xiApiKey);
        }

        /**
         * Execute streamAudioFromSnapshot request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return streamAudioFromSnapshotAsync(projectId, projectSnapshotId, xiApiKey, _callback);
        }
    }

    /**
     * Stream Project Audio
     * Stream the audio from a project snapshot.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @param projectSnapshotId The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project. (required)
     * @return StreamAudioFromSnapshotRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public StreamAudioFromSnapshotRequestBuilder streamAudioFromSnapshot(String projectId, String projectSnapshotId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (projectSnapshotId == null) throw new IllegalArgumentException("\"projectSnapshotId\" is required but got null");
            

        return new StreamAudioFromSnapshotRequestBuilder(projectId, projectSnapshotId);
    }
    private okhttp3.Call streamAudioFromSnapshotPostCall(String projectId, String chapterId, String chapterSnapshotId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/chapters/{chapter_id}/snapshots/{chapter_snapshot_id}/stream"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "chapter_id" + "}", localVarApiClient.escapeString(chapterId.toString()))
            .replace("{" + "chapter_snapshot_id" + "}", localVarApiClient.escapeString(chapterSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamAudioFromSnapshotPostValidateBeforeCall(String projectId, String chapterId, String chapterSnapshotId, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling streamAudioFromSnapshotPost(Async)");
        }

        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling streamAudioFromSnapshotPost(Async)");
        }

        // verify the required parameter 'chapterSnapshotId' is set
        if (chapterSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'chapterSnapshotId' when calling streamAudioFromSnapshotPost(Async)");
        }

        return streamAudioFromSnapshotPostCall(projectId, chapterId, chapterSnapshotId, xiApiKey, _callback);

    }


    private ApiResponse<Void> streamAudioFromSnapshotPostWithHttpInfo(String projectId, String chapterId, String chapterSnapshotId, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = streamAudioFromSnapshotPostValidateBeforeCall(projectId, chapterId, chapterSnapshotId, xiApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call streamAudioFromSnapshotPostAsync(String projectId, String chapterId, String chapterSnapshotId, String xiApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamAudioFromSnapshotPostValidateBeforeCall(projectId, chapterId, chapterSnapshotId, xiApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StreamAudioFromSnapshotPostRequestBuilder {
        private final String projectId;
        private final String chapterId;
        private final String chapterSnapshotId;
        private String xiApiKey;

        private StreamAudioFromSnapshotPostRequestBuilder(String projectId, String chapterId, String chapterSnapshotId) {
            this.projectId = projectId;
            this.chapterId = chapterId;
            this.chapterSnapshotId = chapterSnapshotId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return StreamAudioFromSnapshotPostRequestBuilder
         */
        public StreamAudioFromSnapshotPostRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for streamAudioFromSnapshotPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamAudioFromSnapshotPostCall(projectId, chapterId, chapterSnapshotId, xiApiKey, _callback);
        }


        /**
         * Execute streamAudioFromSnapshotPost request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            streamAudioFromSnapshotPostWithHttpInfo(projectId, chapterId, chapterSnapshotId, xiApiKey);
        }

        /**
         * Execute streamAudioFromSnapshotPost request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return streamAudioFromSnapshotPostWithHttpInfo(projectId, chapterId, chapterSnapshotId, xiApiKey);
        }

        /**
         * Execute streamAudioFromSnapshotPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return streamAudioFromSnapshotPostAsync(projectId, chapterId, chapterSnapshotId, xiApiKey, _callback);
        }
    }

    /**
     * Stream Chapter Audio
     * Stream the audio from a chapter snapshot. Use GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to return the chapter snapshots of a chapter.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @param chapterId The chapter_id of the chapter. You can query GET https://api.elevenlabs.io/v1/projects/{project_id}/chapters to list all available chapters for a project. (required)
     * @param chapterSnapshotId The chapter_snapshot_id of the chapter snapshot. You can query GET /v1/projects/{project_id}/chapters/{chapter_id}/snapshots to the all available snapshots for a chapter. (required)
     * @return StreamAudioFromSnapshotPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public StreamAudioFromSnapshotPostRequestBuilder streamAudioFromSnapshotPost(String projectId, String chapterId, String chapterSnapshotId) throws IllegalArgumentException {
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (chapterId == null) throw new IllegalArgumentException("\"chapterId\" is required but got null");
            

        if (chapterSnapshotId == null) throw new IllegalArgumentException("\"chapterSnapshotId\" is required but got null");
            

        return new StreamAudioFromSnapshotPostRequestBuilder(projectId, chapterId, chapterSnapshotId);
    }
    private okhttp3.Call updatePronunciationDictionariesCall(String projectId, BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, String xiApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost;

        // create path and map variables
        String localVarPath = "/v1/projects/{project_id}/update-pronunciation-dictionaries"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xiApiKey != null) {
            localVarHeaderParams.put("xi-api-key", localVarApiClient.parameterToString(xiApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePronunciationDictionariesValidateBeforeCall(String projectId, BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, String xiApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updatePronunciationDictionaries(Async)");
        }

        // verify the required parameter 'bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost' is set
        if (bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost == null) {
            throw new ApiException("Missing the required parameter 'bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost' when calling updatePronunciationDictionaries(Async)");
        }

        return updatePronunciationDictionariesCall(projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey, _callback);

    }


    private ApiResponse<Object> updatePronunciationDictionariesWithHttpInfo(String projectId, BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, String xiApiKey) throws ApiException {
        okhttp3.Call localVarCall = updatePronunciationDictionariesValidateBeforeCall(projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePronunciationDictionariesAsync(String projectId, BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, String xiApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePronunciationDictionariesValidateBeforeCall(projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePronunciationDictionariesRequestBuilder {
        private final List<PronunciationDictionaryVersionLocatorDBModel> pronunciationDictionaryLocators;
        private final String projectId;
        private String xiApiKey;

        private UpdatePronunciationDictionariesRequestBuilder(List<PronunciationDictionaryVersionLocatorDBModel> pronunciationDictionaryLocators, String projectId) {
            this.pronunciationDictionaryLocators = pronunciationDictionaryLocators;
            this.projectId = projectId;
        }

        /**
         * Set xiApiKey
         * @param xiApiKey Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the &#39;Profile&#39; tab on the website. (optional)
         * @return UpdatePronunciationDictionariesRequestBuilder
         */
        public UpdatePronunciationDictionariesRequestBuilder xiApiKey(String xiApiKey) {
            this.xiApiKey = xiApiKey;
            return this;
        }
        
        /**
         * Build call for updatePronunciationDictionaries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost = buildBodyParams();
            return updatePronunciationDictionariesCall(projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey, _callback);
        }

        private BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost buildBodyParams() {
            BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost = new BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost();
            bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost.pronunciationDictionaryLocators(this.pronunciationDictionaryLocators);
            return bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost;
        }

        /**
         * Execute updatePronunciationDictionaries request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost = buildBodyParams();
            ApiResponse<Object> localVarResp = updatePronunciationDictionariesWithHttpInfo(projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePronunciationDictionaries request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost = buildBodyParams();
            return updatePronunciationDictionariesWithHttpInfo(projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey);
        }

        /**
         * Execute updatePronunciationDictionaries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost = buildBodyParams();
            return updatePronunciationDictionariesAsync(projectId, bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost, xiApiKey, _callback);
        }
    }

    /**
     * Update Pronunciation Dictionaries
     * Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
     * @param projectId The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects. (required)
     * @param bodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost  (required)
     * @return UpdatePronunciationDictionariesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePronunciationDictionariesRequestBuilder updatePronunciationDictionaries(List<PronunciationDictionaryVersionLocatorDBModel> pronunciationDictionaryLocators, String projectId) throws IllegalArgumentException {
        if (pronunciationDictionaryLocators == null) throw new IllegalArgumentException("\"pronunciationDictionaryLocators\" is required but got null");
        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new UpdatePronunciationDictionariesRequestBuilder(pronunciationDictionaryLocators, projectId);
    }
}
