/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PronunciationDictionaryVersionLocatorDBModel;
import com.konfigthis.client.model.VoiceSettingsResponseModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BodyTextToSpeechV1TextToSpeechVoiceIdPost
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BodyTextToSpeechV1TextToSpeechVoiceIdPost {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_MODEL_ID = "model_id";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId = "eleven_monolingual_v1";

  public static final String SERIALIZED_NAME_VOICE_SETTINGS = "voice_settings";
  @SerializedName(SERIALIZED_NAME_VOICE_SETTINGS)
  private VoiceSettingsResponseModel voiceSettings;

  public static final String SERIALIZED_NAME_PRONUNCIATION_DICTIONARY_LOCATORS = "pronunciation_dictionary_locators";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATION_DICTIONARY_LOCATORS)
  private List<PronunciationDictionaryVersionLocatorDBModel> pronunciationDictionaryLocators = null;

  public BodyTextToSpeechV1TextToSpeechVoiceIdPost() {
  }

  public BodyTextToSpeechV1TextToSpeechVoiceIdPost text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * The text that will get converted into speech.
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The text that will get converted into speech.")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public BodyTextToSpeechV1TextToSpeechVoiceIdPost modelId(String modelId) {
    
    
    
    
    this.modelId = modelId;
    return this;
  }

   /**
   * Identifier of the model that will be used, you can query them using GET /v1/models. The model needs to have support for text to speech, you can check this using the can_do_text_to_speech property.
   * @return modelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "eleven_monolingual_v1", value = "Identifier of the model that will be used, you can query them using GET /v1/models. The model needs to have support for text to speech, you can check this using the can_do_text_to_speech property.")

  public String getModelId() {
    return modelId;
  }


  public void setModelId(String modelId) {
    
    
    
    this.modelId = modelId;
  }


  public BodyTextToSpeechV1TextToSpeechVoiceIdPost voiceSettings(VoiceSettingsResponseModel voiceSettings) {
    
    
    
    
    this.voiceSettings = voiceSettings;
    return this;
  }

   /**
   * Voice settings overriding stored setttings for the given voice. They are applied only on the given request.
   * @return voiceSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Voice settings overriding stored setttings for the given voice. They are applied only on the given request.")

  public VoiceSettingsResponseModel getVoiceSettings() {
    return voiceSettings;
  }


  public void setVoiceSettings(VoiceSettingsResponseModel voiceSettings) {
    
    
    
    this.voiceSettings = voiceSettings;
  }


  public BodyTextToSpeechV1TextToSpeechVoiceIdPost pronunciationDictionaryLocators(List<PronunciationDictionaryVersionLocatorDBModel> pronunciationDictionaryLocators) {
    
    
    
    
    this.pronunciationDictionaryLocators = pronunciationDictionaryLocators;
    return this;
  }

  public BodyTextToSpeechV1TextToSpeechVoiceIdPost addPronunciationDictionaryLocatorsItem(PronunciationDictionaryVersionLocatorDBModel pronunciationDictionaryLocatorsItem) {
    if (this.pronunciationDictionaryLocators == null) {
      this.pronunciationDictionaryLocators = new ArrayList<>();
    }
    this.pronunciationDictionaryLocators.add(pronunciationDictionaryLocatorsItem);
    return this;
  }

   /**
   * A list of pronunciation dictionary locators (id, version_id) to be applied to the text. They will be applied in order. You may have up to 3 locators per request
   * @return pronunciationDictionaryLocators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "A list of pronunciation dictionary locators (id, version_id) to be applied to the text. They will be applied in order. You may have up to 3 locators per request")

  public List<PronunciationDictionaryVersionLocatorDBModel> getPronunciationDictionaryLocators() {
    return pronunciationDictionaryLocators;
  }


  public void setPronunciationDictionaryLocators(List<PronunciationDictionaryVersionLocatorDBModel> pronunciationDictionaryLocators) {
    
    
    
    this.pronunciationDictionaryLocators = pronunciationDictionaryLocators;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BodyTextToSpeechV1TextToSpeechVoiceIdPost instance itself
   */
  public BodyTextToSpeechV1TextToSpeechVoiceIdPost putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BodyTextToSpeechV1TextToSpeechVoiceIdPost bodyTextToSpeechV1TextToSpeechVoiceIdPost = (BodyTextToSpeechV1TextToSpeechVoiceIdPost) o;
    return Objects.equals(this.text, bodyTextToSpeechV1TextToSpeechVoiceIdPost.text) &&
        Objects.equals(this.modelId, bodyTextToSpeechV1TextToSpeechVoiceIdPost.modelId) &&
        Objects.equals(this.voiceSettings, bodyTextToSpeechV1TextToSpeechVoiceIdPost.voiceSettings) &&
        Objects.equals(this.pronunciationDictionaryLocators, bodyTextToSpeechV1TextToSpeechVoiceIdPost.pronunciationDictionaryLocators)&&
        Objects.equals(this.additionalProperties, bodyTextToSpeechV1TextToSpeechVoiceIdPost.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, modelId, voiceSettings, pronunciationDictionaryLocators, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BodyTextToSpeechV1TextToSpeechVoiceIdPost {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    voiceSettings: ").append(toIndentedString(voiceSettings)).append("\n");
    sb.append("    pronunciationDictionaryLocators: ").append(toIndentedString(pronunciationDictionaryLocators)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("text");
    openapiFields.add("model_id");
    openapiFields.add("voice_settings");
    openapiFields.add("pronunciation_dictionary_locators");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BodyTextToSpeechV1TextToSpeechVoiceIdPost
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BodyTextToSpeechV1TextToSpeechVoiceIdPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BodyTextToSpeechV1TextToSpeechVoiceIdPost is not found in the empty JSON string", BodyTextToSpeechV1TextToSpeechVoiceIdPost.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BodyTextToSpeechV1TextToSpeechVoiceIdPost.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("model_id") != null && !jsonObj.get("model_id").isJsonNull()) && !jsonObj.get("model_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_id").toString()));
      }
      // validate the optional field `voice_settings`
      if (jsonObj.get("voice_settings") != null && !jsonObj.get("voice_settings").isJsonNull()) {
        VoiceSettingsResponseModel.validateJsonObject(jsonObj.getAsJsonObject("voice_settings"));
      }
      if (jsonObj.get("pronunciation_dictionary_locators") != null && !jsonObj.get("pronunciation_dictionary_locators").isJsonNull()) {
        JsonArray jsonArraypronunciationDictionaryLocators = jsonObj.getAsJsonArray("pronunciation_dictionary_locators");
        if (jsonArraypronunciationDictionaryLocators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pronunciation_dictionary_locators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pronunciation_dictionary_locators` to be an array in the JSON string but got `%s`", jsonObj.get("pronunciation_dictionary_locators").toString()));
          }

          // validate the optional field `pronunciation_dictionary_locators` (array)
          for (int i = 0; i < jsonArraypronunciationDictionaryLocators.size(); i++) {
            PronunciationDictionaryVersionLocatorDBModel.validateJsonObject(jsonArraypronunciationDictionaryLocators.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BodyTextToSpeechV1TextToSpeechVoiceIdPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BodyTextToSpeechV1TextToSpeechVoiceIdPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BodyTextToSpeechV1TextToSpeechVoiceIdPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BodyTextToSpeechV1TextToSpeechVoiceIdPost.class));

       return (TypeAdapter<T>) new TypeAdapter<BodyTextToSpeechV1TextToSpeechVoiceIdPost>() {
           @Override
           public void write(JsonWriter out, BodyTextToSpeechV1TextToSpeechVoiceIdPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BodyTextToSpeechV1TextToSpeechVoiceIdPost read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BodyTextToSpeechV1TextToSpeechVoiceIdPost instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BodyTextToSpeechV1TextToSpeechVoiceIdPost given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BodyTextToSpeechV1TextToSpeechVoiceIdPost
  * @throws IOException if the JSON string is invalid with respect to BodyTextToSpeechV1TextToSpeechVoiceIdPost
  */
  public static BodyTextToSpeechV1TextToSpeechVoiceIdPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BodyTextToSpeechV1TextToSpeechVoiceIdPost.class);
  }

 /**
  * Convert an instance of BodyTextToSpeechV1TextToSpeechVoiceIdPost to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

