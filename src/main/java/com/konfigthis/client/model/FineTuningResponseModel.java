/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ManualVerificationResponseModel;
import com.konfigthis.client.model.VerificationAttemptResponseModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FineTuningResponseModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FineTuningResponseModel {
  public static final String SERIALIZED_NAME_IS_ALLOWED_TO_FINE_TUNE = "is_allowed_to_fine_tune";
  @SerializedName(SERIALIZED_NAME_IS_ALLOWED_TO_FINE_TUNE)
  private Boolean isAllowedToFineTune;

  /**
   * Gets or Sets finetuningState
   */
  @JsonAdapter(FinetuningStateEnum.Adapter.class)
 public enum FinetuningStateEnum {
    NOT_STARTED("not_started"),
    
    QUEUED("queued"),
    
    FINE_TUNING("fine_tuning"),
    
    FINE_TUNED("fine_tuned"),
    
    FAILED("failed"),
    
    DELAYED("delayed");

    private String value;

    FinetuningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FinetuningStateEnum fromValue(String value) {
      for (FinetuningStateEnum b : FinetuningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FinetuningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FinetuningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FinetuningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FinetuningStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FINETUNING_STATE = "finetuning_state";
  @SerializedName(SERIALIZED_NAME_FINETUNING_STATE)
  private FinetuningStateEnum finetuningState;

  public static final String SERIALIZED_NAME_VERIFICATION_FAILURES = "verification_failures";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_FAILURES)
  private List<String> verificationFailures = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFICATION_ATTEMPTS_COUNT = "verification_attempts_count";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ATTEMPTS_COUNT)
  private Integer verificationAttemptsCount;

  public static final String SERIALIZED_NAME_MANUAL_VERIFICATION_REQUESTED = "manual_verification_requested";
  @SerializedName(SERIALIZED_NAME_MANUAL_VERIFICATION_REQUESTED)
  private Boolean manualVerificationRequested;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_FINETUNING_PROGRESS = "finetuning_progress";
  @SerializedName(SERIALIZED_NAME_FINETUNING_PROGRESS)
  private Map<String, Double> finetuningProgress = null;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_DATASET_DURATION_SECONDS = "dataset_duration_seconds";
  @SerializedName(SERIALIZED_NAME_DATASET_DURATION_SECONDS)
  private Double datasetDurationSeconds;

  public static final String SERIALIZED_NAME_VERIFICATION_ATTEMPTS = "verification_attempts";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ATTEMPTS)
  private List<VerificationAttemptResponseModel> verificationAttempts = null;

  public static final String SERIALIZED_NAME_SLICE_IDS = "slice_ids";
  @SerializedName(SERIALIZED_NAME_SLICE_IDS)
  private List<String> sliceIds = null;

  public static final String SERIALIZED_NAME_MANUAL_VERIFICATION = "manual_verification";
  @SerializedName(SERIALIZED_NAME_MANUAL_VERIFICATION)
  private ManualVerificationResponseModel manualVerification;

  public FineTuningResponseModel() {
  }

  public FineTuningResponseModel isAllowedToFineTune(Boolean isAllowedToFineTune) {
    
    
    
    
    this.isAllowedToFineTune = isAllowedToFineTune;
    return this;
  }

   /**
   * Get isAllowedToFineTune
   * @return isAllowedToFineTune
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsAllowedToFineTune() {
    return isAllowedToFineTune;
  }


  public void setIsAllowedToFineTune(Boolean isAllowedToFineTune) {
    
    
    
    this.isAllowedToFineTune = isAllowedToFineTune;
  }


  public FineTuningResponseModel finetuningState(FinetuningStateEnum finetuningState) {
    
    
    
    
    this.finetuningState = finetuningState;
    return this;
  }

   /**
   * Get finetuningState
   * @return finetuningState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FinetuningStateEnum getFinetuningState() {
    return finetuningState;
  }


  public void setFinetuningState(FinetuningStateEnum finetuningState) {
    
    
    
    this.finetuningState = finetuningState;
  }


  public FineTuningResponseModel verificationFailures(List<String> verificationFailures) {
    
    
    
    
    this.verificationFailures = verificationFailures;
    return this;
  }

  public FineTuningResponseModel addVerificationFailuresItem(String verificationFailuresItem) {
    this.verificationFailures.add(verificationFailuresItem);
    return this;
  }

   /**
   * Get verificationFailures
   * @return verificationFailures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getVerificationFailures() {
    return verificationFailures;
  }


  public void setVerificationFailures(List<String> verificationFailures) {
    
    
    
    this.verificationFailures = verificationFailures;
  }


  public FineTuningResponseModel verificationAttemptsCount(Integer verificationAttemptsCount) {
    
    
    
    
    this.verificationAttemptsCount = verificationAttemptsCount;
    return this;
  }

   /**
   * Get verificationAttemptsCount
   * @return verificationAttemptsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getVerificationAttemptsCount() {
    return verificationAttemptsCount;
  }


  public void setVerificationAttemptsCount(Integer verificationAttemptsCount) {
    
    
    
    this.verificationAttemptsCount = verificationAttemptsCount;
  }


  public FineTuningResponseModel manualVerificationRequested(Boolean manualVerificationRequested) {
    
    
    
    
    this.manualVerificationRequested = manualVerificationRequested;
    return this;
  }

   /**
   * Get manualVerificationRequested
   * @return manualVerificationRequested
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getManualVerificationRequested() {
    return manualVerificationRequested;
  }


  public void setManualVerificationRequested(Boolean manualVerificationRequested) {
    
    
    
    this.manualVerificationRequested = manualVerificationRequested;
  }


  public FineTuningResponseModel language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public FineTuningResponseModel finetuningProgress(Map<String, Double> finetuningProgress) {
    
    
    
    
    this.finetuningProgress = finetuningProgress;
    return this;
  }

  public FineTuningResponseModel putFinetuningProgressItem(String key, Double finetuningProgressItem) {
    if (this.finetuningProgress == null) {
      this.finetuningProgress = new HashMap<>();
    }
    this.finetuningProgress.put(key, finetuningProgressItem);
    return this;
  }

   /**
   * Get finetuningProgress
   * @return finetuningProgress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Double> getFinetuningProgress() {
    return finetuningProgress;
  }


  public void setFinetuningProgress(Map<String, Double> finetuningProgress) {
    
    
    
    this.finetuningProgress = finetuningProgress;
  }


  public FineTuningResponseModel message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public FineTuningResponseModel datasetDurationSeconds(Double datasetDurationSeconds) {
    
    
    
    
    this.datasetDurationSeconds = datasetDurationSeconds;
    return this;
  }

  public FineTuningResponseModel datasetDurationSeconds(Integer datasetDurationSeconds) {
    
    
    
    
    this.datasetDurationSeconds = datasetDurationSeconds.doubleValue();
    return this;
  }

   /**
   * Get datasetDurationSeconds
   * @return datasetDurationSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDatasetDurationSeconds() {
    return datasetDurationSeconds;
  }


  public void setDatasetDurationSeconds(Double datasetDurationSeconds) {
    
    
    
    this.datasetDurationSeconds = datasetDurationSeconds;
  }


  public FineTuningResponseModel verificationAttempts(List<VerificationAttemptResponseModel> verificationAttempts) {
    
    
    
    
    this.verificationAttempts = verificationAttempts;
    return this;
  }

  public FineTuningResponseModel addVerificationAttemptsItem(VerificationAttemptResponseModel verificationAttemptsItem) {
    if (this.verificationAttempts == null) {
      this.verificationAttempts = new ArrayList<>();
    }
    this.verificationAttempts.add(verificationAttemptsItem);
    return this;
  }

   /**
   * Get verificationAttempts
   * @return verificationAttempts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VerificationAttemptResponseModel> getVerificationAttempts() {
    return verificationAttempts;
  }


  public void setVerificationAttempts(List<VerificationAttemptResponseModel> verificationAttempts) {
    
    
    
    this.verificationAttempts = verificationAttempts;
  }


  public FineTuningResponseModel sliceIds(List<String> sliceIds) {
    
    
    
    
    this.sliceIds = sliceIds;
    return this;
  }

  public FineTuningResponseModel addSliceIdsItem(String sliceIdsItem) {
    if (this.sliceIds == null) {
      this.sliceIds = new ArrayList<>();
    }
    this.sliceIds.add(sliceIdsItem);
    return this;
  }

   /**
   * Get sliceIds
   * @return sliceIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSliceIds() {
    return sliceIds;
  }


  public void setSliceIds(List<String> sliceIds) {
    
    
    
    this.sliceIds = sliceIds;
  }


  public FineTuningResponseModel manualVerification(ManualVerificationResponseModel manualVerification) {
    
    
    
    
    this.manualVerification = manualVerification;
    return this;
  }

   /**
   * Get manualVerification
   * @return manualVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ManualVerificationResponseModel getManualVerification() {
    return manualVerification;
  }


  public void setManualVerification(ManualVerificationResponseModel manualVerification) {
    
    
    
    this.manualVerification = manualVerification;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FineTuningResponseModel instance itself
   */
  public FineTuningResponseModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FineTuningResponseModel fineTuningResponseModel = (FineTuningResponseModel) o;
    return Objects.equals(this.isAllowedToFineTune, fineTuningResponseModel.isAllowedToFineTune) &&
        Objects.equals(this.finetuningState, fineTuningResponseModel.finetuningState) &&
        Objects.equals(this.verificationFailures, fineTuningResponseModel.verificationFailures) &&
        Objects.equals(this.verificationAttemptsCount, fineTuningResponseModel.verificationAttemptsCount) &&
        Objects.equals(this.manualVerificationRequested, fineTuningResponseModel.manualVerificationRequested) &&
        Objects.equals(this.language, fineTuningResponseModel.language) &&
        Objects.equals(this.finetuningProgress, fineTuningResponseModel.finetuningProgress) &&
        Objects.equals(this.message, fineTuningResponseModel.message) &&
        Objects.equals(this.datasetDurationSeconds, fineTuningResponseModel.datasetDurationSeconds) &&
        Objects.equals(this.verificationAttempts, fineTuningResponseModel.verificationAttempts) &&
        Objects.equals(this.sliceIds, fineTuningResponseModel.sliceIds) &&
        Objects.equals(this.manualVerification, fineTuningResponseModel.manualVerification)&&
        Objects.equals(this.additionalProperties, fineTuningResponseModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isAllowedToFineTune, finetuningState, verificationFailures, verificationAttemptsCount, manualVerificationRequested, language, finetuningProgress, message, datasetDurationSeconds, verificationAttempts, sliceIds, manualVerification, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FineTuningResponseModel {\n");
    sb.append("    isAllowedToFineTune: ").append(toIndentedString(isAllowedToFineTune)).append("\n");
    sb.append("    finetuningState: ").append(toIndentedString(finetuningState)).append("\n");
    sb.append("    verificationFailures: ").append(toIndentedString(verificationFailures)).append("\n");
    sb.append("    verificationAttemptsCount: ").append(toIndentedString(verificationAttemptsCount)).append("\n");
    sb.append("    manualVerificationRequested: ").append(toIndentedString(manualVerificationRequested)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    finetuningProgress: ").append(toIndentedString(finetuningProgress)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    datasetDurationSeconds: ").append(toIndentedString(datasetDurationSeconds)).append("\n");
    sb.append("    verificationAttempts: ").append(toIndentedString(verificationAttempts)).append("\n");
    sb.append("    sliceIds: ").append(toIndentedString(sliceIds)).append("\n");
    sb.append("    manualVerification: ").append(toIndentedString(manualVerification)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_allowed_to_fine_tune");
    openapiFields.add("finetuning_state");
    openapiFields.add("verification_failures");
    openapiFields.add("verification_attempts_count");
    openapiFields.add("manual_verification_requested");
    openapiFields.add("language");
    openapiFields.add("finetuning_progress");
    openapiFields.add("message");
    openapiFields.add("dataset_duration_seconds");
    openapiFields.add("verification_attempts");
    openapiFields.add("slice_ids");
    openapiFields.add("manual_verification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_allowed_to_fine_tune");
    openapiRequiredFields.add("finetuning_state");
    openapiRequiredFields.add("verification_failures");
    openapiRequiredFields.add("verification_attempts_count");
    openapiRequiredFields.add("manual_verification_requested");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FineTuningResponseModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FineTuningResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FineTuningResponseModel is not found in the empty JSON string", FineTuningResponseModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FineTuningResponseModel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("finetuning_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finetuning_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finetuning_state").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("verification_failures") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("verification_failures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_failures` to be an array in the JSON string but got `%s`", jsonObj.get("verification_failures").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("verification_attempts") != null && !jsonObj.get("verification_attempts").isJsonNull()) {
        JsonArray jsonArrayverificationAttempts = jsonObj.getAsJsonArray("verification_attempts");
        if (jsonArrayverificationAttempts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("verification_attempts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `verification_attempts` to be an array in the JSON string but got `%s`", jsonObj.get("verification_attempts").toString()));
          }

          // validate the optional field `verification_attempts` (array)
          for (int i = 0; i < jsonArrayverificationAttempts.size(); i++) {
            VerificationAttemptResponseModel.validateJsonObject(jsonArrayverificationAttempts.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("slice_ids") != null && !jsonObj.get("slice_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_ids` to be an array in the JSON string but got `%s`", jsonObj.get("slice_ids").toString()));
      }
      // validate the optional field `manual_verification`
      if (jsonObj.get("manual_verification") != null && !jsonObj.get("manual_verification").isJsonNull()) {
        ManualVerificationResponseModel.validateJsonObject(jsonObj.getAsJsonObject("manual_verification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FineTuningResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FineTuningResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FineTuningResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FineTuningResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FineTuningResponseModel>() {
           @Override
           public void write(JsonWriter out, FineTuningResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FineTuningResponseModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FineTuningResponseModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FineTuningResponseModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FineTuningResponseModel
  * @throws IOException if the JSON string is invalid with respect to FineTuningResponseModel
  */
  public static FineTuningResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FineTuningResponseModel.class);
  }

 /**
  * Convert an instance of FineTuningResponseModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

