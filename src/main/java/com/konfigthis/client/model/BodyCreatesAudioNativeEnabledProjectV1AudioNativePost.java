/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BodyCreatesAudioNativeEnabledProjectV1AudioNativePost
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BodyCreatesAudioNativeEnabledProjectV1AudioNativePost {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_SMALL = "small";
  @SerializedName(SERIALIZED_NAME_SMALL)
  private Boolean small = false;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "text_color";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private String textColor;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "background_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_SESSIONIZATION = "sessionization";
  @SerializedName(SERIALIZED_NAME_SESSIONIZATION)
  private Integer sessionization = 0;

  public static final String SERIALIZED_NAME_VOICE_ID = "voice_id";
  @SerializedName(SERIALIZED_NAME_VOICE_ID)
  private String voiceId;

  public static final String SERIALIZED_NAME_MODEL_ID = "model_id";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private File _file;

  public static final String SERIALIZED_NAME_AUTO_CONVERT = "auto_convert";
  @SerializedName(SERIALIZED_NAME_AUTO_CONVERT)
  private Boolean autoConvert = false;

  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost() {
  }

  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title used in the player and inserted at the top of the uploaded article. If not provided, the default title set in the Player settings is used.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title used in the player and inserted at the top of the uploaded article. If not provided, the default title set in the Player settings is used.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Project name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Project name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost image(String image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * Image URL used in the player. If not provided, default image set in the Player settings is used.
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Image URL used in the player. If not provided, default image set in the Player settings is used.")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    
    
    
    this.image = image;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost author(String author) {
    
    
    
    
    this.author = author;
    return this;
  }

   /**
   * Author used in the player and inserted at the start of the uploaded article. If not provided, the default author set in the Player settings is used.
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Author used in the player and inserted at the start of the uploaded article. If not provided, the default author set in the Player settings is used.")

  public String getAuthor() {
    return author;
  }


  public void setAuthor(String author) {
    
    
    
    this.author = author;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost small(Boolean small) {
    
    
    
    
    this.small = small;
    return this;
  }

   /**
   * Whether to use small player or not. If not provided, default value set in the Player settings is used.
   * @return small
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to use small player or not. If not provided, default value set in the Player settings is used.")

  public Boolean getSmall() {
    return small;
  }


  public void setSmall(Boolean small) {
    
    
    
    this.small = small;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost textColor(String textColor) {
    
    
    
    
    this.textColor = textColor;
    return this;
  }

   /**
   * Text color used in the player. If not provided, default text color set in the Player settings is used.
   * @return textColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text color used in the player. If not provided, default text color set in the Player settings is used.")

  public String getTextColor() {
    return textColor;
  }


  public void setTextColor(String textColor) {
    
    
    
    this.textColor = textColor;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost backgroundColor(String backgroundColor) {
    
    
    
    
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Background color used in the player. If not provided, default background color set in the Player settings is used.
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Background color used in the player. If not provided, default background color set in the Player settings is used.")

  public String getBackgroundColor() {
    return backgroundColor;
  }


  public void setBackgroundColor(String backgroundColor) {
    
    
    
    this.backgroundColor = backgroundColor;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost sessionization(Integer sessionization) {
    
    
    
    
    this.sessionization = sessionization;
    return this;
  }

   /**
   * Specifies for how many minutes to persist the session across page reloads. If not provided, default sessionization set in the Player settings is used.
   * @return sessionization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Specifies for how many minutes to persist the session across page reloads. If not provided, default sessionization set in the Player settings is used.")

  public Integer getSessionization() {
    return sessionization;
  }


  public void setSessionization(Integer sessionization) {
    
    
    
    this.sessionization = sessionization;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost voiceId(String voiceId) {
    
    
    
    
    this.voiceId = voiceId;
    return this;
  }

   /**
   * Voice ID used to voice the content. If not provided, default voice ID set in the Player settings is used.
   * @return voiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Voice ID used to voice the content. If not provided, default voice ID set in the Player settings is used.")

  public String getVoiceId() {
    return voiceId;
  }


  public void setVoiceId(String voiceId) {
    
    
    
    this.voiceId = voiceId;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost modelId(String modelId) {
    
    
    
    
    this.modelId = modelId;
    return this;
  }

   /**
   * TTS Model ID used in the player. If not provided, default model ID set in the Player settings is used.
   * @return modelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "TTS Model ID used in the player. If not provided, default model ID set in the Player settings is used.")

  public String getModelId() {
    return modelId;
  }


  public void setModelId(String modelId) {
    
    
    
    this.modelId = modelId;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost _file(File _file) {
    
    
    
    
    this._file = _file;
    return this;
  }

   /**
   * Either txt or HTML input file containing the article content. HTML should be formatted as follows &#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Your content&amp;lt;/p&amp;gt;&amp;lt;h5&amp;gt;More of your content&amp;lt;/h5&amp;gt;&amp;lt;p&amp;gt;Some more of your content&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;
   * @return _file
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Either txt or HTML input file containing the article content. HTML should be formatted as follows '&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;p&gt;Your content&lt;/p&gt;&lt;h5&gt;More of your content&lt;/h5&gt;&lt;p&gt;Some more of your content&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'")

  public File getFile() {
    return _file;
  }


  public void setFile(File _file) {
    
    
    
    this._file = _file;
  }


  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost autoConvert(Boolean autoConvert) {
    
    
    
    
    this.autoConvert = autoConvert;
    return this;
  }

   /**
   * Whether to auto convert the project to audio or not.
   * @return autoConvert
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether to auto convert the project to audio or not.")

  public Boolean getAutoConvert() {
    return autoConvert;
  }


  public void setAutoConvert(Boolean autoConvert) {
    
    
    
    this.autoConvert = autoConvert;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BodyCreatesAudioNativeEnabledProjectV1AudioNativePost instance itself
   */
  public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BodyCreatesAudioNativeEnabledProjectV1AudioNativePost bodyCreatesAudioNativeEnabledProjectV1AudioNativePost = (BodyCreatesAudioNativeEnabledProjectV1AudioNativePost) o;
    return Objects.equals(this.title, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.title) &&
        Objects.equals(this.name, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.name) &&
        Objects.equals(this.image, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.image) &&
        Objects.equals(this.author, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.author) &&
        Objects.equals(this.small, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.small) &&
        Objects.equals(this.textColor, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.textColor) &&
        Objects.equals(this.backgroundColor, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.backgroundColor) &&
        Objects.equals(this.sessionization, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.sessionization) &&
        Objects.equals(this.voiceId, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.voiceId) &&
        Objects.equals(this.modelId, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.modelId) &&
        Objects.equals(this._file, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost._file) &&
        Objects.equals(this.autoConvert, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.autoConvert)&&
        Objects.equals(this.additionalProperties, bodyCreatesAudioNativeEnabledProjectV1AudioNativePost.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, name, image, author, small, textColor, backgroundColor, sessionization, voiceId, modelId, _file, autoConvert, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BodyCreatesAudioNativeEnabledProjectV1AudioNativePost {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    small: ").append(toIndentedString(small)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    sessionization: ").append(toIndentedString(sessionization)).append("\n");
    sb.append("    voiceId: ").append(toIndentedString(voiceId)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    autoConvert: ").append(toIndentedString(autoConvert)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("name");
    openapiFields.add("image");
    openapiFields.add("author");
    openapiFields.add("small");
    openapiFields.add("text_color");
    openapiFields.add("background_color");
    openapiFields.add("sessionization");
    openapiFields.add("voice_id");
    openapiFields.add("model_id");
    openapiFields.add("file");
    openapiFields.add("auto_convert");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("file");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BodyCreatesAudioNativeEnabledProjectV1AudioNativePost
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BodyCreatesAudioNativeEnabledProjectV1AudioNativePost.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BodyCreatesAudioNativeEnabledProjectV1AudioNativePost is not found in the empty JSON string", BodyCreatesAudioNativeEnabledProjectV1AudioNativePost.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BodyCreatesAudioNativeEnabledProjectV1AudioNativePost.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("text_color") != null && !jsonObj.get("text_color").isJsonNull()) && !jsonObj.get("text_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_color").toString()));
      }
      if ((jsonObj.get("background_color") != null && !jsonObj.get("background_color").isJsonNull()) && !jsonObj.get("background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_color").toString()));
      }
      if ((jsonObj.get("voice_id") != null && !jsonObj.get("voice_id").isJsonNull()) && !jsonObj.get("voice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice_id").toString()));
      }
      if ((jsonObj.get("model_id") != null && !jsonObj.get("model_id").isJsonNull()) && !jsonObj.get("model_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BodyCreatesAudioNativeEnabledProjectV1AudioNativePost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BodyCreatesAudioNativeEnabledProjectV1AudioNativePost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BodyCreatesAudioNativeEnabledProjectV1AudioNativePost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BodyCreatesAudioNativeEnabledProjectV1AudioNativePost.class));

       return (TypeAdapter<T>) new TypeAdapter<BodyCreatesAudioNativeEnabledProjectV1AudioNativePost>() {
           @Override
           public void write(JsonWriter out, BodyCreatesAudioNativeEnabledProjectV1AudioNativePost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BodyCreatesAudioNativeEnabledProjectV1AudioNativePost read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BodyCreatesAudioNativeEnabledProjectV1AudioNativePost instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BodyCreatesAudioNativeEnabledProjectV1AudioNativePost given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BodyCreatesAudioNativeEnabledProjectV1AudioNativePost
  * @throws IOException if the JSON string is invalid with respect to BodyCreatesAudioNativeEnabledProjectV1AudioNativePost
  */
  public static BodyCreatesAudioNativeEnabledProjectV1AudioNativePost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BodyCreatesAudioNativeEnabledProjectV1AudioNativePost.class);
  }

 /**
  * Convert an instance of BodyCreatesAudioNativeEnabledProjectV1AudioNativePost to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

